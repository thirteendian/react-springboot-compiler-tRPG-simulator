Index: client/src/main/resources/static/createObject.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>function createFormInput(form, entryName, id) {\n    var i = document.createElement(\"input\");\n    i.type = \"text\";\n    i.name = entryName;\n    i.id = id;\n    form.appendChild(i);\n}\n\nfunction createFormCheckBox(form, entryName, id) {\n    var c = document.createElement(\"input\");\n    c.type = \"checkbox\";\n    c.id = id;\n    c.name = entryName;\n    form.appendChild(c);\n}\n\nfunction createFormButton(form, buttonName) {\n    var s = document.createElement(\"input\");\n    s.type = \"submit\";\n    s.value = buttonName;\n    form.appendChild(s);\n}\n\nfunction createForm() {\n    var f = document.createElement(\"form\");\n    f.setAttribute('method', \"post\");\n    f.setAttribute('action', \"submit.php\")\n    createFormInput(f, \"asdf1\", 1);\n    createFormInput(f, \"asdf2\", 2);\n    createFormCheckBox(f, \"asdf3\", 3);\n    createFormButton(f, \"submit\");\n}\n\n$(function () {\n    $(\"#asdf\").click(function () {\n        createForm();\n    });\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/resources/static/createObject.js b/client/src/main/resources/static/createObject.js
--- a/client/src/main/resources/static/createObject.js	(revision aa0107d1ac2044f0f7ed49d1b2ffe277854ee062)
+++ b/client/src/main/resources/static/createObject.js	(date 1658461346972)
@@ -1,38 +1,215 @@
-function createFormInput(form, entryName, id) {
+/**
+ * Following js code require package
+ *     <script src="/webjars/jquery/jquery.min.js"></script>
+ *     <script src="/webjars/sockjs-client/sockjs.min.js"></script>
+ *     <script src="/webjars/stomp-websocket/stomp.min.js"></script>
+ */
+$(document).ready(function () {
+    connectObjectCreateSocket();
+})
+
+var stompClient = null;
+
+function connectObjectCreateSocket() {
+    var socket = new SockJS('/gs-guide-websocket');
+    stompClient = Stomp.over(socket);
+    stompClient.connect({}, function (frame) {
+        console.log('Connected: ' + frame);
+        stompClient.subscribe('/objectcreate/field', function (RespObjectCreatingField) {
+            var objectField = JSON.parse(RespObjectCreatingField.body).objectField;
+            var fieldType = new Map(Object.entries(JSON.parse(RespObjectCreatingField.body).fieldType));
+            createForm(objectField, fieldType);
+        });
+    });
+}
+
+function disconnect() {
+    if (stompClient !== null) {
+        stompClient.disconnect();
+    }
+    console.log("Disconnected");
+}
+
+function createFormInput(parent, id) {
     var i = document.createElement("input");
     i.type = "text";
-    i.name = entryName;
+    i.name = id;
     i.id = id;
-    form.appendChild(i);
+    parent.appendChild(i);
+    var br = document.createElement("br");
+    parent.appendChild(br);
 }
 
-function createFormCheckBox(form, entryName, id) {
+function createFormCheckBox(parent, id) {
     var c = document.createElement("input");
     c.type = "checkbox";
     c.id = id;
-    c.name = entryName;
-    form.appendChild(c);
+    c.name = id;
+    parent.appendChild(c);
+    var br = document.createElement("br");
+    parent.appendChild(br);
 }
 
-function createFormButton(form, buttonName) {
+function createFormSubmitButton(parent, buttonName, id) {
     var s = document.createElement("input");
     s.type = "submit";
     s.value = buttonName;
-    form.appendChild(s);
+    s.id = id;//ID should be unique!//TODO:
+    parent.appendChild(s);
+    var br = document.createElement("br");
+    parent.appendChild(br);
+}
+
+function createFormDropDown(parent, arrayList, id) {
+    var select = document.createElement("select");
+    select.name = id;
+    select.id = id;
+    for (const val of arrayList) {
+        var option = document.createElement("option");
+        option.value = val;
+        option.text = val;
+        select.appendChild(option);
+    }
+    parent.appendChild(select);
+    var br = document.createElement("br");
+    parent.appendChild(br);
+}
+
+function createFormAddmoreButtonWithoutArrayList(parent, id, generateFunction) {
+    var id_counter = 0;
+    var addMoreButton = document.createElement("button");
+    addMoreButton.value = "add";
+    addMoreButton.type = "button";
+    addMoreButton.id = id + "_" + "addmoreButton";
+    addMoreButton.onclick = function () {
+        id_counter += 1;
+        var inputID = id + "_" + id_counter.toString();//arrayofarrayofoptionofint_0_0
+        generateFunction(parent, inputID);
+    }
+    parent.appendChild(addMoreButton);
 }
 
-function createForm() {
+function createFormAddmoreButtonWithArrayList(parent, id, arrayList, generateFunction) {
+    var id_counter = 0;
+    var addMoreButton = document.createElement("button");
+    addMoreButton.value = "add";
+    addMoreButton.type = "button";
+    addMoreButton.id = id + "_" + "addmoreButton";
+    addMoreButton.onclick = function () {
+        id_counter += 1;
+        var inputID = id + "_" + id_counter.toString();//arrayofarrayofoptionofint_0_0
+        generateFunction(parent, arrayList, inputID);
+    }
+    parent.appendChild(addMoreButton);
+}
+
+function createFormArrayDropDown(parent, arrayList, id) {
+    var div = document.createElement("div");
+    createFormAddmoreButtonWithArrayList(div, id, arrayList, createFormDropDown);
+    parent.appendChild(div);
+    var br = document.createElement("br");
+    parent.appendChild(br);
+}
+
+/**
+ * create HTML Form element
+ * @param parent parent js structure handler
+ * @param labelName the name of label
+ */
+function createFormLabel(parent, labelName) {
+    var label = document.createElement("label");
+    label.innerHTML = labelName + ": ";
+    parent.appendChild(label);
+}
+
+/**
+ * generate form according to recursive structure
+ * @param objectFieldType The self FK recursive object contains recursive structure
+ * @param parent The parent js structure handler
+ * @param parentIdIndex The parent ID's index for generating element id
+ * Example of objectFieldType:
+ * {"id":..., "k":prim/option/array, "name":null/int/string/...., "elem":None or objectFieldType}
+ * Note that if "elem" = NONE means no recursive structure, if elem != None then recursive structure
+ */
+function generateForm(parent, objectFieldType, parentIdIndex,recursiveCounter) {
+    if (objectFieldType.k == "prim") {
+        createFormInput(parent,parentIdIndex+"_input");
+    } else if (objectFieldType.k == "option") {
+        createFormCheckBox(parent,parentIdIndex+"_checkbox");
+        createFormInput(parent,parentIdIndex+"_input");
+    } else if (objectFieldType.k =="array"){
+        // if type is array, recursive structure
+        var addMoreButton = document.createElement("button");
+        addMoreButton.value = "add";
+        addMoreButton.type = "button";
+        addMoreButton.id=parentIdIndex+"_"+recursiveCounter+"_addButton";
+        addMoreButton.onclick = function (){
+
+        }
+    }
+
+}
+
+/**
+ * The object Form was created based on type
+ * id prefix= object_form_
+ * @param objectField list order of objects. Subscribed by connectObjectCreateSocket(), RespObjectCreatingField's field
+ * @param fieldType hashmap of object type. Subscribed by connectObjectCreateSocket(), RespObjectCreatingField's field
+ */
+function createForm(objectField, fieldType) {
     var f = document.createElement("form");
     f.setAttribute('method', "post");
-    f.setAttribute('action', "submit.php")
-    createFormInput(f, "asdf1", 1);
-    createFormInput(f, "asdf2", 2);
-    createFormCheckBox(f, "asdf3", 3);
-    createFormButton(f, "submit");
+    f.setAttribute('action', "submit.php");
+    var formID = "object_form_";
+    for (i = 0; i < objectField.length; i++) {
+        formID = formID + i;
+        //Create div
+        var div = document.createElement("div");
+        div.id = formID + "_div";
+        //Create Label:
+        createFormLabel(div, objectField[i]);
+        //generate form structure
+        generateForm(div, fieldType.get(objectField[i]), formID,0);
+        f.appendChild(div);
+        //
+        // if (fieldType.get(objectField[i]) == "string") {
+        //     createFormLabel(f, objectField[i])
+        //     formID = formID + "string_" + i.toString();
+        //     createFormInput(f, formID);
+        // } else if (fieldType.get(objectField[i]) == "option of int") {
+        //     createFormLabel(f, objectField[i])
+        //     formID = formID + "optionofint_" + i.toString();
+        //     //TODO: how to get options
+        //     var list = ["test1", "test2", "test3"];
+        //     createFormDropDown(f, list, formID);
+        // } else if (fieldType.get(objectField[i]) == "array of array of option of int") {
+        //     createFormLabel(f, objectField[i])
+        //     formID = formID + "arrayofarrayofoptionofint_" + i.toString();
+        //     //TODO: how to get options
+        //     var list = ["test1", "test2", "test3"];
+        //     createFormArrayDropDown(f, list, formID);
+        // } else {
+        //     createFormLabel(f, objectField[i])
+        //     formID = formID + "input_" + i.toString();
+        //     createFormInput(f, formID);
+        // }
+    }
+    document.getElementsByTagName('body')[0].appendChild(f); //pure javascript
+}
+
+function sendObjectName(objectName) {
+    stompClient.send("/app/createobject_name", {}, JSON.stringify({
+        'objectName': objectName
+    }));
 }
 
 $(function () {
-    $("#asdf").click(function () {
-        createForm();
+    $("form").on('submit', function (e) {
+        //select in object.html
+        var select = document.getElementById("objectName");
+        var objectName = select.value;
+        console.log("onClict submit objectName: " + objectName);
+        sendObjectName(objectName);
+        e.preventDefault();
     });
-});
+});
\ No newline at end of file
Index: client/src/main/java/edu/duke/summer/client/stomp/DiceRollingController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.duke.summer.client.stomp;\n\nimport edu.duke.summer.client.dto.DiceRollingDto;\nimport edu.duke.summer.client.service.GameService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.messaging.handler.annotation.MessageMapping;\nimport org.springframework.messaging.handler.annotation.SendTo;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.util.HtmlUtils;\n\nimport java.security.Principal;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\n@Controller\npublic class DiceRollingController {\n    @Autowired\n    private GameService gameService;\n\n\n    /**\n     * Receive diceRolling raw input string, broadcast output to SendTo\n     * @param message\n     * @return\n     * @throws Exception\n     */\n    @MessageMapping(\"/dicerolling_result\")\n    @SendTo(\"/dicerolling/result\")\n    public RespDiceRollingResult getDiceRollingResult(Principal principal,ReqDiceRollingString message) throws Exception {\n        DiceRollingDto diceRollingDto = new DiceRollingDto();\n        diceRollingDto.setPlayer(principal.getName());\n        diceRollingDto.setGame(\"game\");\n        List<String> visibles = new ArrayList<>();\n        visibles.add(\"user1\");\n        visibles.add(\"user2\");\n        diceRollingDto.setVisibles(visibles);\n        diceRollingDto.setMagicCheck(message.getMagicCheck());\n        diceRollingDto.setRawData(message.getRawString());\n        System.out.println(\"The Magic Check is \"+ gameService.getMagicCheckData(\"game\",principal.getName()));\n        return new RespDiceRollingResult(HtmlUtils.htmlEscape(message.getRawString()),gameService.getDiceRollingResults(diceRollingDto).getResult(),gameService.getMagicCheckData(\"game\",principal.getName()));\n    }\n\n    @MessageMapping(\"/createobject_name\")\n    @SendTo(\"/objectcreate/field\")\n    public RespObjectCreatingField getObjectCreatingField(ReqObjectCreatingName reqObjectCreatingName){\n        System.out.println(\"ObjectName:\" + reqObjectCreatingName.getObjectName());\n        RespObjectCreatingField respObjectCreatingField = new RespObjectCreatingField();\n        List<String> list = new ArrayList<String>();\n        list.add(\"Test1\");\n        list.add(\"Test2\");\n        HashMap<String,String> hashMap = new HashMap<>();\n        hashMap.put(\"Test1\",\"int\");\n        hashMap.put(\"Test2\",\"string\");\n        respObjectCreatingField.setObjectField(list);\n        respObjectCreatingField.setFieldType(hashMap);\n        return respObjectCreatingField;\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/edu/duke/summer/client/stomp/DiceRollingController.java b/client/src/main/java/edu/duke/summer/client/stomp/DiceRollingController.java
--- a/client/src/main/java/edu/duke/summer/client/stomp/DiceRollingController.java	(revision aa0107d1ac2044f0f7ed49d1b2ffe277854ee062)
+++ b/client/src/main/java/edu/duke/summer/client/stomp/DiceRollingController.java	(date 1658449163724)
@@ -1,11 +1,13 @@
 package edu.duke.summer.client.stomp;
 
 import edu.duke.summer.client.dto.DiceRollingDto;
+import edu.duke.summer.client.dto.ObjectFieldDto;
 import edu.duke.summer.client.service.GameService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.messaging.handler.annotation.MessageMapping;
 import org.springframework.messaging.handler.annotation.SendTo;
 import org.springframework.stereotype.Controller;
+import org.springframework.ui.Model;
 import org.springframework.web.util.HtmlUtils;
 
 import java.security.Principal;
@@ -45,15 +47,12 @@
     @SendTo("/objectcreate/field")
     public RespObjectCreatingField getObjectCreatingField(ReqObjectCreatingName reqObjectCreatingName){
         System.out.println("ObjectName:" + reqObjectCreatingName.getObjectName());
+        ObjectFieldDto objectFieldDto = gameService.getObjectFields("1",reqObjectCreatingName.getObjectName());
         RespObjectCreatingField respObjectCreatingField = new RespObjectCreatingField();
-        List<String> list = new ArrayList<String>();
-        list.add("Test1");
-        list.add("Test2");
-        HashMap<String,String> hashMap = new HashMap<>();
-        hashMap.put("Test1","int");
-        hashMap.put("Test2","string");
-        respObjectCreatingField.setObjectField(list);
-        respObjectCreatingField.setFieldType(hashMap);
+        //List of field(Order)
+        respObjectCreatingField.setObjectField(objectFieldDto.getObjectField());
+        //Hashmap of Type(Self FK)
+        respObjectCreatingField.setFieldType(objectFieldDto.getFieldType());
         return respObjectCreatingField;
     }
 
Index: client/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>server.port=5432\n#Database connection authentication\n\n#Database Settings\nspring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect\nspring.jpa.hibernate.ddl-auto=create-drop\nspring.datasource.driver-class-name=org.postgresql.Driver\nspring.datasource.url=jdbc:postgresql://localhost:5432/postgres\nspring.datasource.username=postgres\nspring.datasource.password=postgres\n#spring.jpa.show-sql=true\n#spring.sql.init.mode=always\n#spring.datasource.initialize=true\n#spring.sql.init.continue-on-error=true\n\n#spring.datasource.url=jdbc:postgresql://localhost:5440/game\n#spring.datasource.password=\n#spring.jpa.hibernate.ddl-auto=create-drop\n#spring.jpa.show-sql=true\n#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n#spring.jpa.properties.hibernate.format_sql=true\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/client/src/main/resources/application.properties b/client/src/main/resources/application.properties
--- a/client/src/main/resources/application.properties	(revision aa0107d1ac2044f0f7ed49d1b2ffe277854ee062)
+++ b/client/src/main/resources/application.properties	(date 1658449257592)
@@ -1,5 +1,5 @@
-server.port=5432
-#Database connection authentication
+#LocalHost Port
+server.port=12345
 
 #Database Settings
 spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
@@ -8,14 +8,4 @@
 spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
 spring.datasource.username=postgres
 spring.datasource.password=postgres
-#spring.jpa.show-sql=true
-#spring.sql.init.mode=always
-#spring.datasource.initialize=true
-#spring.sql.init.continue-on-error=true
 
-#spring.datasource.url=jdbc:postgresql://localhost:5440/game
-#spring.datasource.password=
-#spring.jpa.hibernate.ddl-auto=create-drop
-#spring.jpa.show-sql=true
-#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
-#spring.jpa.properties.hibernate.format_sql=true
Index: client/src/generated/java/edu/duke/summer/client/algorithm/inputVisitor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Generated from edu\\duke\\summer\\client\\algorithm\\input.g4 by ANTLR 4.5\npackage edu.duke.summer.client.algorithm;\nimport org.antlr.v4.runtime.misc.NotNull;\nimport org.antlr.v4.runtime.tree.ParseTreeVisitor;\n\n/**\n * This interface defines a complete generic visitor for a parse tree produced\n * by {@link inputParser}.\n *\n * @param <T> The return type of the visit operation. Use {@link Void} for\n * operations with no return type.\n */\npublic interface inputVisitor<T> extends ParseTreeVisitor<T> {\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#prog}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitProg(inputParser.ProgContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#exps}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitExps(inputParser.ExpsContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code nilExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitNilExp(inputParser.NilExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code assignExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitAssignExp(inputParser.AssignExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code lenExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitLenExp(inputParser.LenExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code lvalueExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitLvalueExp(inputParser.LvalueExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code callExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitCallExp(inputParser.CallExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code parensExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitParensExp(inputParser.ParensExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code uminusExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitUminusExp(inputParser.UminusExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code expList}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitExpList(inputParser.ExpListContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code arithmeticExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitArithmeticExp(inputParser.ArithmeticExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code nonExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitNonExp(inputParser.NonExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code rollExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitRollExp(inputParser.RollExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code singleRollExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitSingleRollExp(inputParser.SingleRollExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code trueExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitTrueExp(inputParser.TrueExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code structExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitStructExp(inputParser.StructExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code simpleVarExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitSimpleVarExp(inputParser.SimpleVarExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code falseExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitFalseExp(inputParser.FalseExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code conditionalExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitConditionalExp(inputParser.ConditionalExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code stringExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitStringExp(inputParser.StringExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code quoStrExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitQuoStrExp(inputParser.QuoStrExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code intExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitIntExp(inputParser.IntExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code decList}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitDecList(inputParser.DecListContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code fieldFunCallExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitFieldFunCallExp(inputParser.FieldFunCallExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#strExp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitStrExp(inputParser.StrExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#dec}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitDec(inputParser.DecContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#decs}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitDecs(inputParser.DecsContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#typefield}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitTypefield(inputParser.TypefieldContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#typefields}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitTypefields(inputParser.TypefieldsContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code regularFields}\n\t * labeled alternative in {@link inputParser#finalFields}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitRegularFields(inputParser.RegularFieldsContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code emptyFields}\n\t * labeled alternative in {@link inputParser#finalFields}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitEmptyFields(inputParser.EmptyFieldsContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code regularTypeDefExp}\n\t * labeled alternative in {@link inputParser#defType}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitRegularTypeDefExp(inputParser.RegularTypeDefExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code assignTypeDefExp}\n\t * labeled alternative in {@link inputParser#defType}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitAssignTypeDefExp(inputParser.AssignTypeDefExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#typeID}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitTypeID(inputParser.TypeIDContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#paramList}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitParamList(inputParser.ParamListContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#paramRest}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitParamRest(inputParser.ParamRestContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#defVar}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitDefVar(inputParser.DefVarContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code singleParam}\n\t * labeled alternative in {@link inputParser#params}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitSingleParam(inputParser.SingleParamContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code mulParam}\n\t * labeled alternative in {@link inputParser#params}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitMulParam(inputParser.MulParamContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#funcallExp}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitFuncallExp(inputParser.FuncallExpContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code simpleFieldVar}\n\t * labeled alternative in {@link inputParser#lvalue}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitSimpleFieldVar(inputParser.SimpleFieldVarContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code subscriptVar}\n\t * labeled alternative in {@link inputParser#lvalue}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitSubscriptVar(inputParser.SubscriptVarContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code simpleSubscriptVar}\n\t * labeled alternative in {@link inputParser#lvalue}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitSimpleSubscriptVar(inputParser.SimpleSubscriptVarContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code fieldVar}\n\t * labeled alternative in {@link inputParser#lvalue}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitFieldVar(inputParser.FieldVarContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#initArray}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitInitArray(inputParser.InitArrayContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code simpleAssign}\n\t * labeled alternative in {@link inputParser#assign}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitSimpleAssign(inputParser.SimpleAssignContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code lvalueAssign}\n\t * labeled alternative in {@link inputParser#assign}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitLvalueAssign(inputParser.LvalueAssignContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code initArrayAssign}\n\t * labeled alternative in {@link inputParser#assign}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitInitArrayAssign(inputParser.InitArrayAssignContext ctx);\n\t/**\n\t * Visit a parse tree produced by the {@code simpleInitArrayAssign}\n\t * labeled alternative in {@link inputParser#assign}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitSimpleInitArrayAssign(inputParser.SimpleInitArrayAssignContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#ifStmt}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitIfStmt(inputParser.IfStmtContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#whileStmt}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitWhileStmt(inputParser.WhileStmtContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#forStmt}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitForStmt(inputParser.ForStmtContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#printStmt}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitPrintStmt(inputParser.PrintStmtContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#returnStmt}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitReturnStmt(inputParser.ReturnStmtContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#expStmt}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitExpStmt(inputParser.ExpStmtContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#decStmt}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitDecStmt(inputParser.DecStmtContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#stmts}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitStmts(inputParser.StmtsContext ctx);\n\t/**\n\t * Visit a parse tree produced by {@link inputParser#defFun}.\n\t * @param ctx the parse tree\n\t * @return the visitor result\n\t */\n\tT visitDefFun(inputParser.DefFunContext ctx);\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/generated/java/edu/duke/summer/client/algorithm/inputVisitor.java b/client/src/generated/java/edu/duke/summer/client/algorithm/inputVisitor.java
--- a/client/src/generated/java/edu/duke/summer/client/algorithm/inputVisitor.java	(revision aa0107d1ac2044f0f7ed49d1b2ffe277854ee062)
+++ b/client/src/generated/java/edu/duke/summer/client/algorithm/inputVisitor.java	(date 1658448468850)
@@ -1,4 +1,4 @@
-// Generated from edu\duke\summer\client\algorithm\input.g4 by ANTLR 4.5
+// Generated from edu/duke/summer/client/algorithm/input.g4 by ANTLR 4.5
 package edu.duke.summer.client.algorithm;
 import org.antlr.v4.runtime.misc.NotNull;
 import org.antlr.v4.runtime.tree.ParseTreeVisitor;
Index: client/src/generated/java/edu/duke/summer/client/algorithm/inputBaseVisitor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Generated from edu\\duke\\summer\\client\\algorithm\\input.g4 by ANTLR 4.5\npackage edu.duke.summer.client.algorithm;\nimport org.antlr.v4.runtime.misc.NotNull;\nimport org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;\n\n/**\n * This class provides an empty implementation of {@link inputVisitor},\n * which can be extended to create a visitor which only needs to handle a subset\n * of the available methods.\n *\n * @param <T> The return type of the visit operation. Use {@link Void} for\n * operations with no return type.\n */\npublic class inputBaseVisitor<T> extends AbstractParseTreeVisitor<T> implements inputVisitor<T> {\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitProg(inputParser.ProgContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitExps(inputParser.ExpsContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitNilExp(inputParser.NilExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitAssignExp(inputParser.AssignExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitLenExp(inputParser.LenExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitLvalueExp(inputParser.LvalueExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitCallExp(inputParser.CallExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitParensExp(inputParser.ParensExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitUminusExp(inputParser.UminusExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitExpList(inputParser.ExpListContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitArithmeticExp(inputParser.ArithmeticExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitNonExp(inputParser.NonExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitRollExp(inputParser.RollExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitSingleRollExp(inputParser.SingleRollExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitTrueExp(inputParser.TrueExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitStructExp(inputParser.StructExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitSimpleVarExp(inputParser.SimpleVarExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitFalseExp(inputParser.FalseExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitConditionalExp(inputParser.ConditionalExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitStringExp(inputParser.StringExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitQuoStrExp(inputParser.QuoStrExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitIntExp(inputParser.IntExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitDecList(inputParser.DecListContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitFieldFunCallExp(inputParser.FieldFunCallExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitStrExp(inputParser.StrExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitDec(inputParser.DecContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitDecs(inputParser.DecsContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitTypefield(inputParser.TypefieldContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitTypefields(inputParser.TypefieldsContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitRegularFields(inputParser.RegularFieldsContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitEmptyFields(inputParser.EmptyFieldsContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitRegularTypeDefExp(inputParser.RegularTypeDefExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitAssignTypeDefExp(inputParser.AssignTypeDefExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitTypeID(inputParser.TypeIDContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitParamList(inputParser.ParamListContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitParamRest(inputParser.ParamRestContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitDefVar(inputParser.DefVarContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitSingleParam(inputParser.SingleParamContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitMulParam(inputParser.MulParamContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitFuncallExp(inputParser.FuncallExpContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitSimpleFieldVar(inputParser.SimpleFieldVarContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitSubscriptVar(inputParser.SubscriptVarContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitSimpleSubscriptVar(inputParser.SimpleSubscriptVarContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitFieldVar(inputParser.FieldVarContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitInitArray(inputParser.InitArrayContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitSimpleAssign(inputParser.SimpleAssignContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitLvalueAssign(inputParser.LvalueAssignContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitInitArrayAssign(inputParser.InitArrayAssignContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitSimpleInitArrayAssign(inputParser.SimpleInitArrayAssignContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitIfStmt(inputParser.IfStmtContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitWhileStmt(inputParser.WhileStmtContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitForStmt(inputParser.ForStmtContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitPrintStmt(inputParser.PrintStmtContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitReturnStmt(inputParser.ReturnStmtContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitExpStmt(inputParser.ExpStmtContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitDecStmt(inputParser.DecStmtContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitStmts(inputParser.StmtsContext ctx) { return visitChildren(ctx); }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation returns the result of calling\n\t * {@link #visitChildren} on {@code ctx}.</p>\n\t */\n\t@Override public T visitDefFun(inputParser.DefFunContext ctx) { return visitChildren(ctx); }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/generated/java/edu/duke/summer/client/algorithm/inputBaseVisitor.java b/client/src/generated/java/edu/duke/summer/client/algorithm/inputBaseVisitor.java
--- a/client/src/generated/java/edu/duke/summer/client/algorithm/inputBaseVisitor.java	(revision aa0107d1ac2044f0f7ed49d1b2ffe277854ee062)
+++ b/client/src/generated/java/edu/duke/summer/client/algorithm/inputBaseVisitor.java	(date 1658448468849)
@@ -1,4 +1,4 @@
-// Generated from edu\duke\summer\client\algorithm\input.g4 by ANTLR 4.5
+// Generated from edu/duke/summer/client/algorithm/input.g4 by ANTLR 4.5
 package edu.duke.summer.client.algorithm;
 import org.antlr.v4.runtime.misc.NotNull;
 import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;
Index: client/src/main/java/edu/duke/summer/client/controller/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.duke.summer.client.controller;\n\nimport edu.duke.summer.client.database.repository.GameRepository;\nimport edu.duke.summer.client.dto.GameDto;\nimport edu.duke.summer.client.dto.ObjectNameDto;\nimport edu.duke.summer.client.service.GameService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.validation.Valid;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.security.Principal;\nimport java.util.List;\n\n@Controller\npublic class GameController {\n\n    @Autowired\n    GameService gameService;\n\n    @GetMapping(\"/gameCenter\")\n    public String greeting(Principal principal,Model model){\n\n        //Get All Object List to rander\n        List<String> objects = gameService.getObjectsList(\"1\");\n        model.addAttribute(\"objects\",objects);\n        model.addAttribute(\"curruser\",principal.getName());\n        model.addAttribute(\"objectNameDto\",new ObjectNameDto());\n        return \"game\";\n    }\n\n    @Autowired\n    private GameRepository gameRepo;\n\n    @GetMapping(\"/createGame\")\n    public String GameCreateForm(Model model){\n        model.addAttribute(\"gameDto\", new GameDto());\n        return \"createGame\";\n    }\n\n    @PostMapping(\"/createGame\")\n    public String processCreateGame(@ModelAttribute @Valid GameDto gameDto, Model model){\n        model.addAttribute(\"gameDto\", gameDto);\n        return \"gameCreateSuccess\";\n    }\n\n    @GetMapping(\"chooseGame\")\n    public String showGameChooseForm(Model model){\n        return \"chooseGame\";\n    }\n\n\n    //private final String UPLOAD_DIR = \"./uploads/\";\n\n    @PostMapping(\"/upload\")\n    public String uploadFile(@RequestParam(\"file\") MultipartFile file, RedirectAttributes attributes) {\n\n        // check if file is empty\n        if (file.isEmpty()) {\n            attributes.addFlashAttribute(\"message\", \"Please select a file to upload.\");\n            return \"redirect:/\";\n        }\n\n        // normalize the file path\n        String fileName = StringUtils.cleanPath(file.getOriginalFilename());\n\n        String uploadString = \"\";\n        // convert File to be String\n        try {\n\n            InputStream inputStream = file.getInputStream();\n            InputStreamReader isReader = new InputStreamReader(inputStream);\n            BufferedReader reader = new BufferedReader(isReader);\n            StringBuffer sb = new StringBuffer();\n            String str;\n            while((str = reader.readLine())!=null){\n                sb.append(str);\n            }\n            System.out.println(sb.toString());\n            uploadString = sb.toString();\n            //Path path = Paths.get(UPLOAD_DIR + fileName);\n            //Save File to the local system\n            //Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // return success response\n        attributes.addFlashAttribute(\"message\", \"You successfully uploaded \" + fileName + '!');\n        gameService.createObjects(\"1\",uploadString);\n        System.out.println(\"Successfully Create Objects, the Objects List:\");\n        System.out.println(gameService.getObjectsList(\"1\"));\n        return \"redirect:/createobject\";\n    }\n\n//TODO: This get method should be merged into GamePage\n    @GetMapping(\"/createobject\")\n    public String createObject(Model model){\n        List<String> objects = gameService.getObjectsList(\"1\");\n        model.addAttribute(\"objects\",objects);\n        return \"object\";//TODO:This should be redirected to Game Page\n    }\n    @PostMapping(\"/createobject\")\n    public String createObject(@Valid String objectName){\n        System.out.println(\"This is the selected objectName: \"+ objectName);\n        return \"redirect:/createobject\";//TODO:This should be redirected to Game Page\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/edu/duke/summer/client/controller/GameController.java b/client/src/main/java/edu/duke/summer/client/controller/GameController.java
--- a/client/src/main/java/edu/duke/summer/client/controller/GameController.java	(revision aa0107d1ac2044f0f7ed49d1b2ffe277854ee062)
+++ b/client/src/main/java/edu/duke/summer/client/controller/GameController.java	(date 1658448264743)
@@ -27,13 +27,13 @@
     GameService gameService;
 
     @GetMapping("/gameCenter")
-    public String greeting(Principal principal,Model model){
+    public String greeting(Principal principal, Model model) {
 
         //Get All Object List to rander
         List<String> objects = gameService.getObjectsList("1");
-        model.addAttribute("objects",objects);
-        model.addAttribute("curruser",principal.getName());
-        model.addAttribute("objectNameDto",new ObjectNameDto());
+        model.addAttribute("objects", objects);
+        model.addAttribute("curruser", principal.getName());
+        model.addAttribute("objectNameDto", new ObjectNameDto());
         return "game";
     }
 
@@ -41,19 +41,19 @@
     private GameRepository gameRepo;
 
     @GetMapping("/createGame")
-    public String GameCreateForm(Model model){
+    public String GameCreateForm(Model model) {
         model.addAttribute("gameDto", new GameDto());
         return "createGame";
     }
 
     @PostMapping("/createGame")
-    public String processCreateGame(@ModelAttribute @Valid GameDto gameDto, Model model){
+    public String processCreateGame(@ModelAttribute @Valid GameDto gameDto, Model model) {
         model.addAttribute("gameDto", gameDto);
         return "gameCreateSuccess";
     }
 
     @GetMapping("chooseGame")
-    public String showGameChooseForm(Model model){
+    public String showGameChooseForm(Model model) {
         return "chooseGame";
     }
 
@@ -81,7 +81,7 @@
             BufferedReader reader = new BufferedReader(isReader);
             StringBuffer sb = new StringBuffer();
             String str;
-            while((str = reader.readLine())!=null){
+            while ((str = reader.readLine()) != null) {
                 sb.append(str);
             }
             System.out.println(sb.toString());
@@ -95,22 +95,23 @@
 
         // return success response
         attributes.addFlashAttribute("message", "You successfully uploaded " + fileName + '!');
-        gameService.createObjects("1",uploadString);
+        gameService.createObjects("1", uploadString);
         System.out.println("Successfully Create Objects, the Objects List:");
         System.out.println(gameService.getObjectsList("1"));
         return "redirect:/createobject";
     }
 
-//TODO: This get method should be merged into GamePage
+    //TODO: This get method should be merged into GamePage
     @GetMapping("/createobject")
-    public String createObject(Model model){
+    public String createObject(Model model) {
         List<String> objects = gameService.getObjectsList("1");
-        model.addAttribute("objects",objects);
+        model.addAttribute("objects", objects);
         return "object";//TODO:This should be redirected to Game Page
     }
+
     @PostMapping("/createobject")
-    public String createObject(@Valid String objectName){
-        System.out.println("This is the selected objectName: "+ objectName);
+    public String createObject(@Valid String objectName) {
+        System.out.println("This is the selected objectName: " + objectName);
         return "redirect:/createobject";//TODO:This should be redirected to Game Page
     }
 }
\ No newline at end of file
Index: client/src/generated/java/edu/duke/summer/client/algorithm/inputListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Generated from edu\\duke\\summer\\client\\algorithm\\input.g4 by ANTLR 4.5\npackage edu.duke.summer.client.algorithm;\nimport org.antlr.v4.runtime.misc.NotNull;\nimport org.antlr.v4.runtime.tree.ParseTreeListener;\n\n/**\n * This interface defines a complete listener for a parse tree produced by\n * {@link inputParser}.\n */\npublic interface inputListener extends ParseTreeListener {\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#prog}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterProg(inputParser.ProgContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#prog}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitProg(inputParser.ProgContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#exps}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterExps(inputParser.ExpsContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#exps}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitExps(inputParser.ExpsContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code nilExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterNilExp(inputParser.NilExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code nilExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitNilExp(inputParser.NilExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code assignExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterAssignExp(inputParser.AssignExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code assignExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitAssignExp(inputParser.AssignExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code lenExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterLenExp(inputParser.LenExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code lenExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitLenExp(inputParser.LenExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code lvalueExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterLvalueExp(inputParser.LvalueExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code lvalueExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitLvalueExp(inputParser.LvalueExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code callExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterCallExp(inputParser.CallExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code callExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitCallExp(inputParser.CallExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code parensExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterParensExp(inputParser.ParensExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code parensExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitParensExp(inputParser.ParensExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code uminusExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterUminusExp(inputParser.UminusExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code uminusExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitUminusExp(inputParser.UminusExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code expList}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterExpList(inputParser.ExpListContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code expList}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitExpList(inputParser.ExpListContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code arithmeticExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterArithmeticExp(inputParser.ArithmeticExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code arithmeticExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitArithmeticExp(inputParser.ArithmeticExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code nonExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterNonExp(inputParser.NonExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code nonExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitNonExp(inputParser.NonExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code rollExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterRollExp(inputParser.RollExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code rollExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitRollExp(inputParser.RollExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code singleRollExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterSingleRollExp(inputParser.SingleRollExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code singleRollExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitSingleRollExp(inputParser.SingleRollExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code trueExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterTrueExp(inputParser.TrueExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code trueExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitTrueExp(inputParser.TrueExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code structExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterStructExp(inputParser.StructExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code structExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitStructExp(inputParser.StructExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code simpleVarExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterSimpleVarExp(inputParser.SimpleVarExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code simpleVarExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitSimpleVarExp(inputParser.SimpleVarExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code falseExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterFalseExp(inputParser.FalseExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code falseExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitFalseExp(inputParser.FalseExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code conditionalExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterConditionalExp(inputParser.ConditionalExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code conditionalExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitConditionalExp(inputParser.ConditionalExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code stringExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterStringExp(inputParser.StringExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code stringExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitStringExp(inputParser.StringExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code quoStrExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterQuoStrExp(inputParser.QuoStrExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code quoStrExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitQuoStrExp(inputParser.QuoStrExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code intExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterIntExp(inputParser.IntExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code intExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitIntExp(inputParser.IntExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code decList}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterDecList(inputParser.DecListContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code decList}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitDecList(inputParser.DecListContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code fieldFunCallExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterFieldFunCallExp(inputParser.FieldFunCallExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code fieldFunCallExp}\n\t * labeled alternative in {@link inputParser#exp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitFieldFunCallExp(inputParser.FieldFunCallExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#strExp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterStrExp(inputParser.StrExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#strExp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitStrExp(inputParser.StrExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#dec}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterDec(inputParser.DecContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#dec}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitDec(inputParser.DecContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#decs}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterDecs(inputParser.DecsContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#decs}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitDecs(inputParser.DecsContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#typefield}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterTypefield(inputParser.TypefieldContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#typefield}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitTypefield(inputParser.TypefieldContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#typefields}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterTypefields(inputParser.TypefieldsContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#typefields}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitTypefields(inputParser.TypefieldsContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code regularFields}\n\t * labeled alternative in {@link inputParser#finalFields}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterRegularFields(inputParser.RegularFieldsContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code regularFields}\n\t * labeled alternative in {@link inputParser#finalFields}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitRegularFields(inputParser.RegularFieldsContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code emptyFields}\n\t * labeled alternative in {@link inputParser#finalFields}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterEmptyFields(inputParser.EmptyFieldsContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code emptyFields}\n\t * labeled alternative in {@link inputParser#finalFields}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitEmptyFields(inputParser.EmptyFieldsContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code regularTypeDefExp}\n\t * labeled alternative in {@link inputParser#defType}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterRegularTypeDefExp(inputParser.RegularTypeDefExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code regularTypeDefExp}\n\t * labeled alternative in {@link inputParser#defType}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitRegularTypeDefExp(inputParser.RegularTypeDefExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code assignTypeDefExp}\n\t * labeled alternative in {@link inputParser#defType}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterAssignTypeDefExp(inputParser.AssignTypeDefExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code assignTypeDefExp}\n\t * labeled alternative in {@link inputParser#defType}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitAssignTypeDefExp(inputParser.AssignTypeDefExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#typeID}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterTypeID(inputParser.TypeIDContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#typeID}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitTypeID(inputParser.TypeIDContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#paramList}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterParamList(inputParser.ParamListContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#paramList}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitParamList(inputParser.ParamListContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#paramRest}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterParamRest(inputParser.ParamRestContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#paramRest}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitParamRest(inputParser.ParamRestContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#defVar}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterDefVar(inputParser.DefVarContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#defVar}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitDefVar(inputParser.DefVarContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code singleParam}\n\t * labeled alternative in {@link inputParser#params}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterSingleParam(inputParser.SingleParamContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code singleParam}\n\t * labeled alternative in {@link inputParser#params}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitSingleParam(inputParser.SingleParamContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code mulParam}\n\t * labeled alternative in {@link inputParser#params}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterMulParam(inputParser.MulParamContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code mulParam}\n\t * labeled alternative in {@link inputParser#params}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitMulParam(inputParser.MulParamContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#funcallExp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterFuncallExp(inputParser.FuncallExpContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#funcallExp}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitFuncallExp(inputParser.FuncallExpContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code simpleFieldVar}\n\t * labeled alternative in {@link inputParser#lvalue}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterSimpleFieldVar(inputParser.SimpleFieldVarContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code simpleFieldVar}\n\t * labeled alternative in {@link inputParser#lvalue}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitSimpleFieldVar(inputParser.SimpleFieldVarContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code subscriptVar}\n\t * labeled alternative in {@link inputParser#lvalue}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterSubscriptVar(inputParser.SubscriptVarContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code subscriptVar}\n\t * labeled alternative in {@link inputParser#lvalue}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitSubscriptVar(inputParser.SubscriptVarContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code simpleSubscriptVar}\n\t * labeled alternative in {@link inputParser#lvalue}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterSimpleSubscriptVar(inputParser.SimpleSubscriptVarContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code simpleSubscriptVar}\n\t * labeled alternative in {@link inputParser#lvalue}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitSimpleSubscriptVar(inputParser.SimpleSubscriptVarContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code fieldVar}\n\t * labeled alternative in {@link inputParser#lvalue}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterFieldVar(inputParser.FieldVarContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code fieldVar}\n\t * labeled alternative in {@link inputParser#lvalue}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitFieldVar(inputParser.FieldVarContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#initArray}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterInitArray(inputParser.InitArrayContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#initArray}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitInitArray(inputParser.InitArrayContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code simpleAssign}\n\t * labeled alternative in {@link inputParser#assign}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterSimpleAssign(inputParser.SimpleAssignContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code simpleAssign}\n\t * labeled alternative in {@link inputParser#assign}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitSimpleAssign(inputParser.SimpleAssignContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code lvalueAssign}\n\t * labeled alternative in {@link inputParser#assign}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterLvalueAssign(inputParser.LvalueAssignContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code lvalueAssign}\n\t * labeled alternative in {@link inputParser#assign}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitLvalueAssign(inputParser.LvalueAssignContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code initArrayAssign}\n\t * labeled alternative in {@link inputParser#assign}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterInitArrayAssign(inputParser.InitArrayAssignContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code initArrayAssign}\n\t * labeled alternative in {@link inputParser#assign}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitInitArrayAssign(inputParser.InitArrayAssignContext ctx);\n\t/**\n\t * Enter a parse tree produced by the {@code simpleInitArrayAssign}\n\t * labeled alternative in {@link inputParser#assign}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterSimpleInitArrayAssign(inputParser.SimpleInitArrayAssignContext ctx);\n\t/**\n\t * Exit a parse tree produced by the {@code simpleInitArrayAssign}\n\t * labeled alternative in {@link inputParser#assign}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitSimpleInitArrayAssign(inputParser.SimpleInitArrayAssignContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#ifStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterIfStmt(inputParser.IfStmtContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#ifStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitIfStmt(inputParser.IfStmtContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#whileStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterWhileStmt(inputParser.WhileStmtContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#whileStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitWhileStmt(inputParser.WhileStmtContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#forStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterForStmt(inputParser.ForStmtContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#forStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitForStmt(inputParser.ForStmtContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#printStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterPrintStmt(inputParser.PrintStmtContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#printStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitPrintStmt(inputParser.PrintStmtContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#returnStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterReturnStmt(inputParser.ReturnStmtContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#returnStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitReturnStmt(inputParser.ReturnStmtContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#expStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterExpStmt(inputParser.ExpStmtContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#expStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitExpStmt(inputParser.ExpStmtContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#decStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterDecStmt(inputParser.DecStmtContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#decStmt}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitDecStmt(inputParser.DecStmtContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#stmts}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterStmts(inputParser.StmtsContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#stmts}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitStmts(inputParser.StmtsContext ctx);\n\t/**\n\t * Enter a parse tree produced by {@link inputParser#defFun}.\n\t * @param ctx the parse tree\n\t */\n\tvoid enterDefFun(inputParser.DefFunContext ctx);\n\t/**\n\t * Exit a parse tree produced by {@link inputParser#defFun}.\n\t * @param ctx the parse tree\n\t */\n\tvoid exitDefFun(inputParser.DefFunContext ctx);\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/generated/java/edu/duke/summer/client/algorithm/inputListener.java b/client/src/generated/java/edu/duke/summer/client/algorithm/inputListener.java
--- a/client/src/generated/java/edu/duke/summer/client/algorithm/inputListener.java	(revision aa0107d1ac2044f0f7ed49d1b2ffe277854ee062)
+++ b/client/src/generated/java/edu/duke/summer/client/algorithm/inputListener.java	(date 1658448468848)
@@ -1,4 +1,4 @@
-// Generated from edu\duke\summer\client\algorithm\input.g4 by ANTLR 4.5
+// Generated from edu/duke/summer/client/algorithm/input.g4 by ANTLR 4.5
 package edu.duke.summer.client.algorithm;
 import org.antlr.v4.runtime.misc.NotNull;
 import org.antlr.v4.runtime.tree.ParseTreeListener;
Index: client/src/generated/java/edu/duke/summer/client/algorithm/inputBaseListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Generated from edu\\duke\\summer\\client\\algorithm\\input.g4 by ANTLR 4.5\npackage edu.duke.summer.client.algorithm;\n\nimport org.antlr.v4.runtime.ParserRuleContext;\nimport org.antlr.v4.runtime.misc.NotNull;\nimport org.antlr.v4.runtime.tree.ErrorNode;\nimport org.antlr.v4.runtime.tree.TerminalNode;\n\n/**\n * This class provides an empty implementation of {@link inputListener},\n * which can be extended to create a listener which only needs to handle a subset\n * of the available methods.\n */\npublic class inputBaseListener implements inputListener {\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterProg(inputParser.ProgContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitProg(inputParser.ProgContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterExps(inputParser.ExpsContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitExps(inputParser.ExpsContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterNilExp(inputParser.NilExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitNilExp(inputParser.NilExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterAssignExp(inputParser.AssignExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitAssignExp(inputParser.AssignExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterLenExp(inputParser.LenExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitLenExp(inputParser.LenExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterLvalueExp(inputParser.LvalueExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitLvalueExp(inputParser.LvalueExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterCallExp(inputParser.CallExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitCallExp(inputParser.CallExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterParensExp(inputParser.ParensExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitParensExp(inputParser.ParensExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterUminusExp(inputParser.UminusExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitUminusExp(inputParser.UminusExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterExpList(inputParser.ExpListContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitExpList(inputParser.ExpListContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterArithmeticExp(inputParser.ArithmeticExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitArithmeticExp(inputParser.ArithmeticExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterNonExp(inputParser.NonExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitNonExp(inputParser.NonExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterRollExp(inputParser.RollExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitRollExp(inputParser.RollExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterSingleRollExp(inputParser.SingleRollExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitSingleRollExp(inputParser.SingleRollExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterTrueExp(inputParser.TrueExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitTrueExp(inputParser.TrueExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterStructExp(inputParser.StructExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitStructExp(inputParser.StructExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterSimpleVarExp(inputParser.SimpleVarExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitSimpleVarExp(inputParser.SimpleVarExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterFalseExp(inputParser.FalseExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitFalseExp(inputParser.FalseExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterConditionalExp(inputParser.ConditionalExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitConditionalExp(inputParser.ConditionalExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterStringExp(inputParser.StringExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitStringExp(inputParser.StringExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterQuoStrExp(inputParser.QuoStrExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitQuoStrExp(inputParser.QuoStrExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterIntExp(inputParser.IntExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitIntExp(inputParser.IntExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterDecList(inputParser.DecListContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitDecList(inputParser.DecListContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterFieldFunCallExp(inputParser.FieldFunCallExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitFieldFunCallExp(inputParser.FieldFunCallExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterStrExp(inputParser.StrExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitStrExp(inputParser.StrExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterDec(inputParser.DecContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitDec(inputParser.DecContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterDecs(inputParser.DecsContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitDecs(inputParser.DecsContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterTypefield(inputParser.TypefieldContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitTypefield(inputParser.TypefieldContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterTypefields(inputParser.TypefieldsContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitTypefields(inputParser.TypefieldsContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterRegularFields(inputParser.RegularFieldsContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitRegularFields(inputParser.RegularFieldsContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterEmptyFields(inputParser.EmptyFieldsContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitEmptyFields(inputParser.EmptyFieldsContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterRegularTypeDefExp(inputParser.RegularTypeDefExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitRegularTypeDefExp(inputParser.RegularTypeDefExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterAssignTypeDefExp(inputParser.AssignTypeDefExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitAssignTypeDefExp(inputParser.AssignTypeDefExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterTypeID(inputParser.TypeIDContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitTypeID(inputParser.TypeIDContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterParamList(inputParser.ParamListContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitParamList(inputParser.ParamListContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterParamRest(inputParser.ParamRestContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitParamRest(inputParser.ParamRestContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterDefVar(inputParser.DefVarContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitDefVar(inputParser.DefVarContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterSingleParam(inputParser.SingleParamContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitSingleParam(inputParser.SingleParamContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterMulParam(inputParser.MulParamContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitMulParam(inputParser.MulParamContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterFuncallExp(inputParser.FuncallExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitFuncallExp(inputParser.FuncallExpContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterSimpleFieldVar(inputParser.SimpleFieldVarContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitSimpleFieldVar(inputParser.SimpleFieldVarContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterSubscriptVar(inputParser.SubscriptVarContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitSubscriptVar(inputParser.SubscriptVarContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterSimpleSubscriptVar(inputParser.SimpleSubscriptVarContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitSimpleSubscriptVar(inputParser.SimpleSubscriptVarContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterFieldVar(inputParser.FieldVarContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitFieldVar(inputParser.FieldVarContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterInitArray(inputParser.InitArrayContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitInitArray(inputParser.InitArrayContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterSimpleAssign(inputParser.SimpleAssignContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitSimpleAssign(inputParser.SimpleAssignContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterLvalueAssign(inputParser.LvalueAssignContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitLvalueAssign(inputParser.LvalueAssignContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterInitArrayAssign(inputParser.InitArrayAssignContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitInitArrayAssign(inputParser.InitArrayAssignContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterSimpleInitArrayAssign(inputParser.SimpleInitArrayAssignContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitSimpleInitArrayAssign(inputParser.SimpleInitArrayAssignContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterIfStmt(inputParser.IfStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitIfStmt(inputParser.IfStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterWhileStmt(inputParser.WhileStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitWhileStmt(inputParser.WhileStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterForStmt(inputParser.ForStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitForStmt(inputParser.ForStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterPrintStmt(inputParser.PrintStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitPrintStmt(inputParser.PrintStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterReturnStmt(inputParser.ReturnStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitReturnStmt(inputParser.ReturnStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterExpStmt(inputParser.ExpStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitExpStmt(inputParser.ExpStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterDecStmt(inputParser.DecStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitDecStmt(inputParser.DecStmtContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterStmts(inputParser.StmtsContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitStmts(inputParser.StmtsContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterDefFun(inputParser.DefFunContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitDefFun(inputParser.DefFunContext ctx) { }\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void enterEveryRule(ParserRuleContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void exitEveryRule(ParserRuleContext ctx) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void visitTerminal(TerminalNode node) { }\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>The default implementation does nothing.</p>\n\t */\n\t@Override public void visitErrorNode(ErrorNode node) { }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/generated/java/edu/duke/summer/client/algorithm/inputBaseListener.java b/client/src/generated/java/edu/duke/summer/client/algorithm/inputBaseListener.java
--- a/client/src/generated/java/edu/duke/summer/client/algorithm/inputBaseListener.java	(revision aa0107d1ac2044f0f7ed49d1b2ffe277854ee062)
+++ b/client/src/generated/java/edu/duke/summer/client/algorithm/inputBaseListener.java	(date 1658448468850)
@@ -1,4 +1,4 @@
-// Generated from edu\duke\summer\client\algorithm\input.g4 by ANTLR 4.5
+// Generated from edu/duke/summer/client/algorithm/input.g4 by ANTLR 4.5
 package edu.duke.summer.client.algorithm;
 
 import org.antlr.v4.runtime.ParserRuleContext;
Index: client/src/main/java/edu/duke/summer/client/dto/ObjectFieldDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.duke.summer.client.dto;\n\nimport edu.duke.summer.client.database.model.ObjectField;\n\nimport javax.persistence.*;\nimport java.util.*;\n\npublic class ObjectFieldDto {\n\n    @Column(nullable = false)\n    private String typeName;\n\n    @Column(nullable = false)\n    private List<String> objectField;\n\n    @Column(nullable = false)\n    private HashMap<String, ObjectFieldTypeDto> fieldType;\n\n    @Column\n    private HashMap<String, List<String>> objectIdList;\n\n    public ObjectFieldDto() {\n        this.objectField = new ArrayList<>();\n        this.fieldType = new HashMap<>();\n    }\n\n    public void setTypeName(String typeName) {\n        this.typeName = typeName;\n    }\n\n    public String getTypeName() {\n        return typeName;\n    }\n\n    public void addObjectField(String field) {\n        objectField.add(field);\n    }\n\n    public List<String> getObjectField() {\n        return objectField;\n    }\n\n    public void addFieldType(String field, ObjectFieldTypeDto objectFieldTypeDto) {\n        fieldType.put(field, objectFieldTypeDto);\n    }\n\n    public HashMap<String, ObjectFieldTypeDto> getFieldType() {\n        return fieldType;\n    }\n\n\n    public void addObjectIdList(String typeName, List<String> idList) {\n        objectIdList.put(typeName, idList);\n    }\n\n    public HashMap<String, List<String>> getObjectIdList() {\n        return objectIdList;\n    }\n\n    @Override\n    public String toString() {\n        return \"DiceRolling{\" +\n                \", typeName='\" + typeName + '\\'' +\n                \", objectField='\" + objectField + '\\'' +\n                \", fieldType='\" + fieldType + '\\'' +\n                \", objectIdList='\" + objectIdList + '\\'' +\n                '}';\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/edu/duke/summer/client/dto/ObjectFieldDto.java b/client/src/main/java/edu/duke/summer/client/dto/ObjectFieldDto.java
--- a/client/src/main/java/edu/duke/summer/client/dto/ObjectFieldDto.java	(revision aa0107d1ac2044f0f7ed49d1b2ffe277854ee062)
+++ b/client/src/main/java/edu/duke/summer/client/dto/ObjectFieldDto.java	(date 1658449752705)
@@ -22,6 +22,7 @@
     public ObjectFieldDto() {
         this.objectField = new ArrayList<>();
         this.fieldType = new HashMap<>();
+        this.objectIdList = new HashMap<>();
     }
 
     public void setTypeName(String typeName) {
Index: client/src/generated/java/edu/duke/summer/client/algorithm/inputParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Generated from edu\\duke\\summer\\client\\algorithm\\input.g4 by ANTLR 4.5\npackage edu.duke.summer.client.algorithm;\nimport org.antlr.v4.runtime.atn.*;\nimport org.antlr.v4.runtime.dfa.DFA;\nimport org.antlr.v4.runtime.*;\nimport org.antlr.v4.runtime.misc.*;\nimport org.antlr.v4.runtime.tree.*;\nimport java.util.List;\nimport java.util.Iterator;\nimport java.util.ArrayList;\n\n@SuppressWarnings({\"all\", \"warnings\", \"unchecked\", \"unused\", \"cast\"})\npublic class inputParser extends Parser {\n\tstatic { RuntimeMetaData.checkVersion(\"4.5\", RuntimeMetaData.VERSION); }\n\n\tprotected static final DFA[] _decisionToDFA;\n\tprotected static final PredictionContextCache _sharedContextCache =\n\t\tnew PredictionContextCache();\n\tpublic static final int\n\t\tT__0=1, T__1=2, QUO=3, EQ=4, NE=5, PLUS=6, MINUS=7, MUL=8, DIV=9, LT=10, \n\t\tLE=11, GT=12, GE=13, MOD=14, AND=15, OR=16, ASSIGN=17, COLON=18, COMMA=19, \n\t\tLPAREN=20, RPAREN=21, LBRACK=22, RBRACK=23, LBRACE=24, RBRACE=25, SEMICOLON=26, \n\t\tDOT=27, NEW=28, ROLL=29, SINGLEROLL=30, ROLLKEY=31, IF=32, THEN=33, ELSE=34, \n\t\tWHILE=35, RETURN=36, BREAK=37, ARRAY=38, OPTION=39, LENGTH=40, TRUE=41, \n\t\tFALSE=42, PRINT=43, DO=44, FOR=45, OF=46, TO=47, DEFTYPEKEY=48, DEFFUNKEY=49, \n\t\tDEFVARKEY=50, DEFSTRUCTKEY=51, INT=52, ID=53, STRING=54, WS=55;\n\tpublic static final int\n\t\tRULE_prog = 0, RULE_exps = 1, RULE_exp = 2, RULE_strExp = 3, RULE_dec = 4, \n\t\tRULE_decs = 5, RULE_typefield = 6, RULE_typefields = 7, RULE_finalFields = 8, \n\t\tRULE_defType = 9, RULE_typeID = 10, RULE_paramList = 11, RULE_paramRest = 12, \n\t\tRULE_defVar = 13, RULE_params = 14, RULE_funcallExp = 15, RULE_lvalue = 16, \n\t\tRULE_initArray = 17, RULE_assign = 18, RULE_ifStmt = 19, RULE_whileStmt = 20, \n\t\tRULE_forStmt = 21, RULE_printStmt = 22, RULE_returnStmt = 23, RULE_expStmt = 24, \n\t\tRULE_decStmt = 25, RULE_stmts = 26, RULE_defFun = 27;\n\tpublic static final String[] ruleNames = {\n\t\t\"prog\", \"exps\", \"exp\", \"strExp\", \"dec\", \"decs\", \"typefield\", \"typefields\", \n\t\t\"finalFields\", \"defType\", \"typeID\", \"paramList\", \"paramRest\", \"defVar\", \n\t\t\"params\", \"funcallExp\", \"lvalue\", \"initArray\", \"assign\", \"ifStmt\", \"whileStmt\", \n\t\t\"forStmt\", \"printStmt\", \"returnStmt\", \"expStmt\", \"decStmt\", \"stmts\", \"defFun\"\n\t};\n\n\tprivate static final String[] _LITERAL_NAMES = {\n\t\tnull, \"'?'\", \"'!'\", \"'\\\"'\", \"'=='\", \"'!='\", \"'+'\", \"'-'\", \"'*'\", \"'/'\", \n\t\t\"'<'\", \"'<='\", \"'>'\", \"'>='\", \"'%'\", \"'&&'\", \"'||'\", \"'='\", \"':'\", \"','\", \n\t\t\"'('\", \"')'\", \"'['\", \"']'\", \"'{'\", \"'}'\", \"';'\", \"'.'\", \"'new'\", null, \n\t\tnull, null, \"'if'\", \"'then'\", \"'else'\", \"'while'\", \"'return'\", \"'break'\", \n\t\t\"'array'\", \"'option'\", \"'length'\", \"'true'\", \"'false'\", \"'print'\", \"'do'\", \n\t\t\"'for'\", \"'of'\", \"'to'\", \"'type'\", \"'fun'\", \"'var'\", \"'struct'\"\n\t};\n\tprivate static final String[] _SYMBOLIC_NAMES = {\n\t\tnull, null, null, \"QUO\", \"EQ\", \"NE\", \"PLUS\", \"MINUS\", \"MUL\", \"DIV\", \"LT\", \n\t\t\"LE\", \"GT\", \"GE\", \"MOD\", \"AND\", \"OR\", \"ASSIGN\", \"COLON\", \"COMMA\", \"LPAREN\", \n\t\t\"RPAREN\", \"LBRACK\", \"RBRACK\", \"LBRACE\", \"RBRACE\", \"SEMICOLON\", \"DOT\", \n\t\t\"NEW\", \"ROLL\", \"SINGLEROLL\", \"ROLLKEY\", \"IF\", \"THEN\", \"ELSE\", \"WHILE\", \n\t\t\"RETURN\", \"BREAK\", \"ARRAY\", \"OPTION\", \"LENGTH\", \"TRUE\", \"FALSE\", \"PRINT\", \n\t\t\"DO\", \"FOR\", \"OF\", \"TO\", \"DEFTYPEKEY\", \"DEFFUNKEY\", \"DEFVARKEY\", \"DEFSTRUCTKEY\", \n\t\t\"INT\", \"ID\", \"STRING\", \"WS\"\n\t};\n\tpublic static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);\n\n\t/**\n\t * @deprecated Use {@link #VOCABULARY} instead.\n\t */\n\t@Deprecated\n\tpublic static final String[] tokenNames;\n\tstatic {\n\t\ttokenNames = new String[_SYMBOLIC_NAMES.length];\n\t\tfor (int i = 0; i < tokenNames.length; i++) {\n\t\t\ttokenNames[i] = VOCABULARY.getLiteralName(i);\n\t\t\tif (tokenNames[i] == null) {\n\t\t\t\ttokenNames[i] = VOCABULARY.getSymbolicName(i);\n\t\t\t}\n\n\t\t\tif (tokenNames[i] == null) {\n\t\t\t\ttokenNames[i] = \"<INVALID>\";\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic String[] getTokenNames() {\n\t\treturn tokenNames;\n\t}\n\n\t@Override\n\n\tpublic Vocabulary getVocabulary() {\n\t\treturn VOCABULARY;\n\t}\n\n\t@Override\n\tpublic String getGrammarFileName() { return \"input.g4\"; }\n\n\t@Override\n\tpublic String[] getRuleNames() { return ruleNames; }\n\n\t@Override\n\tpublic String getSerializedATN() { return _serializedATN; }\n\n\t@Override\n\tpublic ATN getATN() { return _ATN; }\n\n\tpublic inputParser(TokenStream input) {\n\t\tsuper(input);\n\t\t_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);\n\t}\n\tpublic static class ProgContext extends ParserRuleContext {\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic ProgContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_prog; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterProg(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitProg(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitProg(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final ProgContext prog() throws RecognitionException {\n\t\tProgContext _localctx = new ProgContext(_ctx, getState());\n\t\tenterRule(_localctx, 0, RULE_prog);\n\t\ttry {\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tsetState(56);\n\t\t\texp(0);\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class ExpsContext extends ParserRuleContext {\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic TerminalNode SEMICOLON() { return getToken(inputParser.SEMICOLON, 0); }\n\t\tpublic ExpsContext exps() {\n\t\t\treturn getRuleContext(ExpsContext.class,0);\n\t\t}\n\t\tpublic ExpsContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_exps; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterExps(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitExps(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitExps(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final ExpsContext exps() throws RecognitionException {\n\t\tExpsContext _localctx = new ExpsContext(_ctx, getState());\n\t\tenterRule(_localctx, 2, RULE_exps);\n\t\ttry {\n\t\t\tsetState(63);\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {\n\t\t\tcase 1:\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(58);\n\t\t\t\texp(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tsetState(59);\n\t\t\t\texp(0);\n\t\t\t\tsetState(60);\n\t\t\t\tmatch(SEMICOLON);\n\t\t\t\tsetState(61);\n\t\t\t\texps();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class ExpContext extends ParserRuleContext {\n\t\tpublic ExpContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_exp; }\n\t \n\t\tpublic ExpContext() { }\n\t\tpublic void copyFrom(ExpContext ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\t}\n\tpublic static class NilExpContext extends ExpContext {\n\t\tpublic NilExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterNilExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitNilExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitNilExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class AssignExpContext extends ExpContext {\n\t\tpublic AssignContext assign() {\n\t\t\treturn getRuleContext(AssignContext.class,0);\n\t\t}\n\t\tpublic AssignExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterAssignExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitAssignExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitAssignExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class LenExpContext extends ExpContext {\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic TerminalNode DOT() { return getToken(inputParser.DOT, 0); }\n\t\tpublic TerminalNode LENGTH() { return getToken(inputParser.LENGTH, 0); }\n\t\tpublic LenExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterLenExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitLenExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitLenExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class LvalueExpContext extends ExpContext {\n\t\tpublic LvalueContext lvalue() {\n\t\t\treturn getRuleContext(LvalueContext.class,0);\n\t\t}\n\t\tpublic LvalueExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterLvalueExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitLvalueExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitLvalueExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class CallExpContext extends ExpContext {\n\t\tpublic FuncallExpContext funcallExp() {\n\t\t\treturn getRuleContext(FuncallExpContext.class,0);\n\t\t}\n\t\tpublic CallExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterCallExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitCallExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitCallExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class ParensExpContext extends ExpContext {\n\t\tpublic TerminalNode LPAREN() { return getToken(inputParser.LPAREN, 0); }\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RPAREN() { return getToken(inputParser.RPAREN, 0); }\n\t\tpublic ParensExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterParensExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitParensExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitParensExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class UminusExpContext extends ExpContext {\n\t\tpublic TerminalNode MINUS() { return getToken(inputParser.MINUS, 0); }\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic UminusExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterUminusExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitUminusExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitUminusExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class ExpListContext extends ExpContext {\n\t\tpublic TerminalNode LBRACE() { return getToken(inputParser.LBRACE, 0); }\n\t\tpublic ExpsContext exps() {\n\t\t\treturn getRuleContext(ExpsContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RBRACE() { return getToken(inputParser.RBRACE, 0); }\n\t\tpublic ExpListContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterExpList(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitExpList(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitExpList(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class ArithmeticExpContext extends ExpContext {\n\t\tpublic ExpContext leftExp;\n\t\tpublic Token op;\n\t\tpublic ExpContext rightExp;\n\t\tpublic List<ExpContext> exp() {\n\t\t\treturn getRuleContexts(ExpContext.class);\n\t\t}\n\t\tpublic ExpContext exp(int i) {\n\t\t\treturn getRuleContext(ExpContext.class,i);\n\t\t}\n\t\tpublic TerminalNode MUL() { return getToken(inputParser.MUL, 0); }\n\t\tpublic TerminalNode DIV() { return getToken(inputParser.DIV, 0); }\n\t\tpublic TerminalNode PLUS() { return getToken(inputParser.PLUS, 0); }\n\t\tpublic TerminalNode MINUS() { return getToken(inputParser.MINUS, 0); }\n\t\tpublic TerminalNode AND() { return getToken(inputParser.AND, 0); }\n\t\tpublic TerminalNode OR() { return getToken(inputParser.OR, 0); }\n\t\tpublic TerminalNode EQ() { return getToken(inputParser.EQ, 0); }\n\t\tpublic TerminalNode NE() { return getToken(inputParser.NE, 0); }\n\t\tpublic TerminalNode LT() { return getToken(inputParser.LT, 0); }\n\t\tpublic TerminalNode LE() { return getToken(inputParser.LE, 0); }\n\t\tpublic TerminalNode GT() { return getToken(inputParser.GT, 0); }\n\t\tpublic TerminalNode GE() { return getToken(inputParser.GE, 0); }\n\t\tpublic ArithmeticExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterArithmeticExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitArithmeticExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitArithmeticExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class NonExpContext extends ExpContext {\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic NonExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterNonExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitNonExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitNonExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class RollExpContext extends ExpContext {\n\t\tpublic TerminalNode ROLL() { return getToken(inputParser.ROLL, 0); }\n\t\tpublic RollExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterRollExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitRollExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitRollExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class SingleRollExpContext extends ExpContext {\n\t\tpublic TerminalNode SINGLEROLL() { return getToken(inputParser.SINGLEROLL, 0); }\n\t\tpublic SingleRollExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterSingleRollExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitSingleRollExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitSingleRollExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class TrueExpContext extends ExpContext {\n\t\tpublic TerminalNode TRUE() { return getToken(inputParser.TRUE, 0); }\n\t\tpublic TrueExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterTrueExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitTrueExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitTrueExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class StructExpContext extends ExpContext {\n\t\tpublic TerminalNode DEFSTRUCTKEY() { return getToken(inputParser.DEFSTRUCTKEY, 0); }\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic TerminalNode LBRACE() { return getToken(inputParser.LBRACE, 0); }\n\t\tpublic FinalFieldsContext finalFields() {\n\t\t\treturn getRuleContext(FinalFieldsContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RBRACE() { return getToken(inputParser.RBRACE, 0); }\n\t\tpublic StructExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterStructExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitStructExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitStructExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class SimpleVarExpContext extends ExpContext {\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic SimpleVarExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterSimpleVarExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitSimpleVarExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitSimpleVarExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class FalseExpContext extends ExpContext {\n\t\tpublic TerminalNode FALSE() { return getToken(inputParser.FALSE, 0); }\n\t\tpublic FalseExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterFalseExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitFalseExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitFalseExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class ConditionalExpContext extends ExpContext {\n\t\tpublic ExpContext cond;\n\t\tpublic ExpContext opt1;\n\t\tpublic ExpContext opt2;\n\t\tpublic TerminalNode COLON() { return getToken(inputParser.COLON, 0); }\n\t\tpublic List<ExpContext> exp() {\n\t\t\treturn getRuleContexts(ExpContext.class);\n\t\t}\n\t\tpublic ExpContext exp(int i) {\n\t\t\treturn getRuleContext(ExpContext.class,i);\n\t\t}\n\t\tpublic ConditionalExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterConditionalExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitConditionalExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitConditionalExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class StringExpContext extends ExpContext {\n\t\tpublic TerminalNode STRING() { return getToken(inputParser.STRING, 0); }\n\t\tpublic StringExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterStringExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitStringExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitStringExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class QuoStrExpContext extends ExpContext {\n\t\tpublic StrExpContext strExp() {\n\t\t\treturn getRuleContext(StrExpContext.class,0);\n\t\t}\n\t\tpublic QuoStrExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterQuoStrExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitQuoStrExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitQuoStrExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class IntExpContext extends ExpContext {\n\t\tpublic Token value;\n\t\tpublic TerminalNode INT() { return getToken(inputParser.INT, 0); }\n\t\tpublic IntExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterIntExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitIntExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitIntExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class DecListContext extends ExpContext {\n\t\tpublic DecsContext decs() {\n\t\t\treturn getRuleContext(DecsContext.class,0);\n\t\t}\n\t\tpublic DecListContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterDecList(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitDecList(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitDecList(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class FieldFunCallExpContext extends ExpContext {\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic TerminalNode DOT() { return getToken(inputParser.DOT, 0); }\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic TerminalNode LPAREN() { return getToken(inputParser.LPAREN, 0); }\n\t\tpublic ExpsContext exps() {\n\t\t\treturn getRuleContext(ExpsContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RPAREN() { return getToken(inputParser.RPAREN, 0); }\n\t\tpublic FieldFunCallExpContext(ExpContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterFieldFunCallExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitFieldFunCallExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitFieldFunCallExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final ExpContext exp() throws RecognitionException {\n\t\treturn exp(0);\n\t}\n\n\tprivate ExpContext exp(int _p) throws RecognitionException {\n\t\tParserRuleContext _parentctx = _ctx;\n\t\tint _parentState = getState();\n\t\tExpContext _localctx = new ExpContext(_ctx, _parentState);\n\t\tExpContext _prevctx = _localctx;\n\t\tint _startState = 4;\n\t\tenterRecursionRule(_localctx, 4, RULE_exp, _p);\n\t\tint _la;\n\t\ttry {\n\t\t\tint _alt;\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tsetState(97);\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t{\n\t\t\t\t_localctx = new NonExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\n\t\t\t\tsetState(66);\n\t\t\t\tmatch(T__1);\n\t\t\t\tsetState(67);\n\t\t\t\texp(9);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t{\n\t\t\t\t_localctx = new UminusExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(68);\n\t\t\t\tmatch(MINUS);\n\t\t\t\tsetState(69);\n\t\t\t\texp(8);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t{\n\t\t\t\t_localctx = new RollExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(70);\n\t\t\t\tmatch(ROLL);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t{\n\t\t\t\t_localctx = new SingleRollExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(71);\n\t\t\t\tmatch(SINGLEROLL);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t{\n\t\t\t\t_localctx = new ParensExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(72);\n\t\t\t\tmatch(LPAREN);\n\t\t\t\tsetState(73);\n\t\t\t\texp(0);\n\t\t\t\tsetState(74);\n\t\t\t\tmatch(RPAREN);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t{\n\t\t\t\t_localctx = new SimpleVarExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(76);\n\t\t\t\tmatch(ID);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\t{\n\t\t\t\t_localctx = new IntExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(77);\n\t\t\t\t((IntExpContext)_localctx).value = match(INT);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t{\n\t\t\t\t_localctx = new StringExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(78);\n\t\t\t\tmatch(STRING);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\t{\n\t\t\t\t_localctx = new QuoStrExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(79);\n\t\t\t\tstrExp();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 10:\n\t\t\t\t{\n\t\t\t\t_localctx = new TrueExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(80);\n\t\t\t\tmatch(TRUE);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 11:\n\t\t\t\t{\n\t\t\t\t_localctx = new FalseExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(81);\n\t\t\t\tmatch(FALSE);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 12:\n\t\t\t\t{\n\t\t\t\t_localctx = new DecListContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(82);\n\t\t\t\tdecs();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 13:\n\t\t\t\t{\n\t\t\t\t_localctx = new NilExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 14:\n\t\t\t\t{\n\t\t\t\t_localctx = new ExpListContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(84);\n\t\t\t\tmatch(LBRACE);\n\t\t\t\tsetState(85);\n\t\t\t\texps();\n\t\t\t\tsetState(86);\n\t\t\t\tmatch(RBRACE);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 15:\n\t\t\t\t{\n\t\t\t\t_localctx = new CallExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(88);\n\t\t\t\tfuncallExp();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 16:\n\t\t\t\t{\n\t\t\t\t_localctx = new StructExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(89);\n\t\t\t\tmatch(DEFSTRUCTKEY);\n\t\t\t\tsetState(90);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(91);\n\t\t\t\tmatch(LBRACE);\n\t\t\t\tsetState(92);\n\t\t\t\tfinalFields();\n\t\t\t\tsetState(93);\n\t\t\t\tmatch(RBRACE);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 17:\n\t\t\t\t{\n\t\t\t\t_localctx = new LvalueExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(95);\n\t\t\t\tlvalue(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 18:\n\t\t\t\t{\n\t\t\t\t_localctx = new AssignExpContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(96);\n\t\t\t\tassign();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t_ctx.stop = _input.LT(-1);\n\t\t\tsetState(129);\n\t\t\t_errHandler.sync(this);\n\t\t\t_alt = getInterpreter().adaptivePredict(_input,3,_ctx);\n\t\t\twhile ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n\t\t\t\tif ( _alt==1 ) {\n\t\t\t\t\tif ( _parseListeners!=null ) triggerExitRuleEvent();\n\t\t\t\t\t_prevctx = _localctx;\n\t\t\t\t\t{\n\t\t\t\t\tsetState(127);\n\t\t\t\t\tswitch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new ConditionalExpContext(new ExpContext(_parentctx, _parentState));\n\t\t\t\t\t\t((ConditionalExpContext)_localctx).cond = _prevctx;\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_exp);\n\t\t\t\t\t\tsetState(99);\n\t\t\t\t\t\tif (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, \"precpred(_ctx, 23)\");\n\t\t\t\t\t\tsetState(100);\n\t\t\t\t\t\tmatch(T__0);\n\t\t\t\t\t\tsetState(101);\n\t\t\t\t\t\t((ConditionalExpContext)_localctx).opt1 = exp(0);\n\t\t\t\t\t\tsetState(102);\n\t\t\t\t\t\tmatch(COLON);\n\t\t\t\t\t\tsetState(103);\n\t\t\t\t\t\t((ConditionalExpContext)_localctx).opt2 = exp(24);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new ArithmeticExpContext(new ExpContext(_parentctx, _parentState));\n\t\t\t\t\t\t((ArithmeticExpContext)_localctx).leftExp = _prevctx;\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_exp);\n\t\t\t\t\t\tsetState(105);\n\t\t\t\t\t\tif (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, \"precpred(_ctx, 22)\");\n\t\t\t\t\t\tsetState(106);\n\t\t\t\t\t\t((ArithmeticExpContext)_localctx).op = _input.LT(1);\n\t\t\t\t\t\t_la = _input.LA(1);\n\t\t\t\t\t\tif ( !(_la==MUL || _la==DIV) ) {\n\t\t\t\t\t\t\t((ArithmeticExpContext)_localctx).op = (Token)_errHandler.recoverInline(this);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsume();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetState(107);\n\t\t\t\t\t\t((ArithmeticExpContext)_localctx).rightExp = exp(23);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new ArithmeticExpContext(new ExpContext(_parentctx, _parentState));\n\t\t\t\t\t\t((ArithmeticExpContext)_localctx).leftExp = _prevctx;\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_exp);\n\t\t\t\t\t\tsetState(108);\n\t\t\t\t\t\tif (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, \"precpred(_ctx, 21)\");\n\t\t\t\t\t\tsetState(109);\n\t\t\t\t\t\t((ArithmeticExpContext)_localctx).op = _input.LT(1);\n\t\t\t\t\t\t_la = _input.LA(1);\n\t\t\t\t\t\tif ( !(_la==PLUS || _la==MINUS) ) {\n\t\t\t\t\t\t\t((ArithmeticExpContext)_localctx).op = (Token)_errHandler.recoverInline(this);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsume();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetState(110);\n\t\t\t\t\t\t((ArithmeticExpContext)_localctx).rightExp = exp(22);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new ArithmeticExpContext(new ExpContext(_parentctx, _parentState));\n\t\t\t\t\t\t((ArithmeticExpContext)_localctx).leftExp = _prevctx;\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_exp);\n\t\t\t\t\t\tsetState(111);\n\t\t\t\t\t\tif (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, \"precpred(_ctx, 20)\");\n\t\t\t\t\t\tsetState(112);\n\t\t\t\t\t\t((ArithmeticExpContext)_localctx).op = _input.LT(1);\n\t\t\t\t\t\t_la = _input.LA(1);\n\t\t\t\t\t\tif ( !(_la==AND || _la==OR) ) {\n\t\t\t\t\t\t\t((ArithmeticExpContext)_localctx).op = (Token)_errHandler.recoverInline(this);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsume();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetState(113);\n\t\t\t\t\t\t((ArithmeticExpContext)_localctx).rightExp = exp(21);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new ArithmeticExpContext(new ExpContext(_parentctx, _parentState));\n\t\t\t\t\t\t((ArithmeticExpContext)_localctx).leftExp = _prevctx;\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_exp);\n\t\t\t\t\t\tsetState(114);\n\t\t\t\t\t\tif (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, \"precpred(_ctx, 19)\");\n\t\t\t\t\t\tsetState(115);\n\t\t\t\t\t\t((ArithmeticExpContext)_localctx).op = _input.LT(1);\n\t\t\t\t\t\t_la = _input.LA(1);\n\t\t\t\t\t\tif ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NE) | (1L << LT) | (1L << LE) | (1L << GT) | (1L << GE))) != 0)) ) {\n\t\t\t\t\t\t\t((ArithmeticExpContext)_localctx).op = (Token)_errHandler.recoverInline(this);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsume();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetState(116);\n\t\t\t\t\t\t((ArithmeticExpContext)_localctx).rightExp = exp(20);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new LenExpContext(new ExpContext(_parentctx, _parentState));\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_exp);\n\t\t\t\t\t\tsetState(117);\n\t\t\t\t\t\tif (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, \"precpred(_ctx, 16)\");\n\t\t\t\t\t\tsetState(118);\n\t\t\t\t\t\tmatch(DOT);\n\t\t\t\t\t\tsetState(119);\n\t\t\t\t\t\tmatch(LENGTH);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new FieldFunCallExpContext(new ExpContext(_parentctx, _parentState));\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_exp);\n\t\t\t\t\t\tsetState(120);\n\t\t\t\t\t\tif (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, \"precpred(_ctx, 15)\");\n\t\t\t\t\t\tsetState(121);\n\t\t\t\t\t\tmatch(DOT);\n\t\t\t\t\t\tsetState(122);\n\t\t\t\t\t\tmatch(ID);\n\t\t\t\t\t\tsetState(123);\n\t\t\t\t\t\tmatch(LPAREN);\n\t\t\t\t\t\tsetState(124);\n\t\t\t\t\t\texps();\n\t\t\t\t\t\tsetState(125);\n\t\t\t\t\t\tmatch(RPAREN);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\tsetState(131);\n\t\t\t\t_errHandler.sync(this);\n\t\t\t\t_alt = getInterpreter().adaptivePredict(_input,3,_ctx);\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\tunrollRecursionContexts(_parentctx);\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class StrExpContext extends ParserRuleContext {\n\t\tpublic List<TerminalNode> QUO() { return getTokens(inputParser.QUO); }\n\t\tpublic TerminalNode QUO(int i) {\n\t\t\treturn getToken(inputParser.QUO, i);\n\t\t}\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic TerminalNode STRING() { return getToken(inputParser.STRING, 0); }\n\t\tpublic TerminalNode INT() { return getToken(inputParser.INT, 0); }\n\t\tpublic StrExpContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_strExp; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterStrExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitStrExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitStrExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final StrExpContext strExp() throws RecognitionException {\n\t\tStrExpContext _localctx = new StrExpContext(_ctx, getState());\n\t\tenterRule(_localctx, 6, RULE_strExp);\n\t\ttry {\n\t\t\tsetState(141);\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {\n\t\t\tcase 1:\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(132);\n\t\t\t\tmatch(QUO);\n\t\t\t\tsetState(133);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(134);\n\t\t\t\tmatch(QUO);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tsetState(135);\n\t\t\t\tmatch(QUO);\n\t\t\t\tsetState(136);\n\t\t\t\tmatch(STRING);\n\t\t\t\tsetState(137);\n\t\t\t\tmatch(QUO);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tenterOuterAlt(_localctx, 3);\n\t\t\t\t{\n\t\t\t\tsetState(138);\n\t\t\t\tmatch(QUO);\n\t\t\t\tsetState(139);\n\t\t\t\tmatch(INT);\n\t\t\t\tsetState(140);\n\t\t\t\tmatch(QUO);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class DecContext extends ParserRuleContext {\n\t\tpublic DefTypeContext defType() {\n\t\t\treturn getRuleContext(DefTypeContext.class,0);\n\t\t}\n\t\tpublic DefFunContext defFun() {\n\t\t\treturn getRuleContext(DefFunContext.class,0);\n\t\t}\n\t\tpublic DefVarContext defVar() {\n\t\t\treturn getRuleContext(DefVarContext.class,0);\n\t\t}\n\t\tpublic DecContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_dec; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterDec(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitDec(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitDec(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final DecContext dec() throws RecognitionException {\n\t\tDecContext _localctx = new DecContext(_ctx, getState());\n\t\tenterRule(_localctx, 8, RULE_dec);\n\t\ttry {\n\t\t\tsetState(146);\n\t\t\tswitch (_input.LA(1)) {\n\t\t\tcase DEFTYPEKEY:\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(143);\n\t\t\t\tdefType();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase DEFFUNKEY:\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tsetState(144);\n\t\t\t\tdefFun();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase DEFVARKEY:\n\t\t\t\tenterOuterAlt(_localctx, 3);\n\t\t\t\t{\n\t\t\t\tsetState(145);\n\t\t\t\tdefVar();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new NoViableAltException(this);\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class DecsContext extends ParserRuleContext {\n\t\tpublic DecContext dec() {\n\t\t\treturn getRuleContext(DecContext.class,0);\n\t\t}\n\t\tpublic DecsContext decs() {\n\t\t\treturn getRuleContext(DecsContext.class,0);\n\t\t}\n\t\tpublic DecsContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_decs; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterDecs(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitDecs(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitDecs(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final DecsContext decs() throws RecognitionException {\n\t\tDecsContext _localctx = new DecsContext(_ctx, getState());\n\t\tenterRule(_localctx, 10, RULE_decs);\n\t\ttry {\n\t\t\tsetState(152);\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {\n\t\t\tcase 1:\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(148);\n\t\t\t\tdec();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tsetState(149);\n\t\t\t\tdec();\n\t\t\t\tsetState(150);\n\t\t\t\tdecs();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class TypefieldContext extends ParserRuleContext {\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic TerminalNode COLON() { return getToken(inputParser.COLON, 0); }\n\t\tpublic TypeIDContext typeID() {\n\t\t\treturn getRuleContext(TypeIDContext.class,0);\n\t\t}\n\t\tpublic TypefieldContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_typefield; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterTypefield(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitTypefield(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitTypefield(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final TypefieldContext typefield() throws RecognitionException {\n\t\tTypefieldContext _localctx = new TypefieldContext(_ctx, getState());\n\t\tenterRule(_localctx, 12, RULE_typefield);\n\t\ttry {\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tsetState(154);\n\t\t\tmatch(ID);\n\t\t\tsetState(155);\n\t\t\tmatch(COLON);\n\t\t\tsetState(156);\n\t\t\ttypeID(0);\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class TypefieldsContext extends ParserRuleContext {\n\t\tpublic TypefieldContext typefield() {\n\t\t\treturn getRuleContext(TypefieldContext.class,0);\n\t\t}\n\t\tpublic TerminalNode COMMA() { return getToken(inputParser.COMMA, 0); }\n\t\tpublic TypefieldsContext typefields() {\n\t\t\treturn getRuleContext(TypefieldsContext.class,0);\n\t\t}\n\t\tpublic TypefieldsContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_typefields; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterTypefields(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitTypefields(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitTypefields(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final TypefieldsContext typefields() throws RecognitionException {\n\t\tTypefieldsContext _localctx = new TypefieldsContext(_ctx, getState());\n\t\tenterRule(_localctx, 14, RULE_typefields);\n\t\ttry {\n\t\t\tsetState(163);\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {\n\t\t\tcase 1:\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(158);\n\t\t\t\ttypefield();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tsetState(159);\n\t\t\t\ttypefield();\n\t\t\t\tsetState(160);\n\t\t\t\tmatch(COMMA);\n\t\t\t\tsetState(161);\n\t\t\t\ttypefields();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class FinalFieldsContext extends ParserRuleContext {\n\t\tpublic FinalFieldsContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_finalFields; }\n\t \n\t\tpublic FinalFieldsContext() { }\n\t\tpublic void copyFrom(FinalFieldsContext ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\t}\n\tpublic static class RegularFieldsContext extends FinalFieldsContext {\n\t\tpublic TypefieldsContext typefields() {\n\t\t\treturn getRuleContext(TypefieldsContext.class,0);\n\t\t}\n\t\tpublic RegularFieldsContext(FinalFieldsContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterRegularFields(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitRegularFields(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitRegularFields(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class EmptyFieldsContext extends FinalFieldsContext {\n\t\tpublic EmptyFieldsContext(FinalFieldsContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterEmptyFields(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitEmptyFields(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitEmptyFields(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final FinalFieldsContext finalFields() throws RecognitionException {\n\t\tFinalFieldsContext _localctx = new FinalFieldsContext(_ctx, getState());\n\t\tenterRule(_localctx, 16, RULE_finalFields);\n\t\ttry {\n\t\t\tsetState(167);\n\t\t\tswitch (_input.LA(1)) {\n\t\t\tcase ID:\n\t\t\t\t_localctx = new RegularFieldsContext(_localctx);\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(165);\n\t\t\t\ttypefields();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase RBRACE:\n\t\t\t\t_localctx = new EmptyFieldsContext(_localctx);\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new NoViableAltException(this);\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class DefTypeContext extends ParserRuleContext {\n\t\tpublic DefTypeContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_defType; }\n\t \n\t\tpublic DefTypeContext() { }\n\t\tpublic void copyFrom(DefTypeContext ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\t}\n\tpublic static class AssignTypeDefExpContext extends DefTypeContext {\n\t\tpublic TypeIDContext refer;\n\t\tpublic TerminalNode DEFTYPEKEY() { return getToken(inputParser.DEFTYPEKEY, 0); }\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic TerminalNode ASSIGN() { return getToken(inputParser.ASSIGN, 0); }\n\t\tpublic TypeIDContext typeID() {\n\t\t\treturn getRuleContext(TypeIDContext.class,0);\n\t\t}\n\t\tpublic AssignTypeDefExpContext(DefTypeContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterAssignTypeDefExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitAssignTypeDefExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitAssignTypeDefExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class RegularTypeDefExpContext extends DefTypeContext {\n\t\tpublic TerminalNode DEFTYPEKEY() { return getToken(inputParser.DEFTYPEKEY, 0); }\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic TerminalNode LBRACE() { return getToken(inputParser.LBRACE, 0); }\n\t\tpublic FinalFieldsContext finalFields() {\n\t\t\treturn getRuleContext(FinalFieldsContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RBRACE() { return getToken(inputParser.RBRACE, 0); }\n\t\tpublic RegularTypeDefExpContext(DefTypeContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterRegularTypeDefExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitRegularTypeDefExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitRegularTypeDefExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final DefTypeContext defType() throws RecognitionException {\n\t\tDefTypeContext _localctx = new DefTypeContext(_ctx, getState());\n\t\tenterRule(_localctx, 18, RULE_defType);\n\t\ttry {\n\t\t\tsetState(179);\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t_localctx = new RegularTypeDefExpContext(_localctx);\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(169);\n\t\t\t\tmatch(DEFTYPEKEY);\n\t\t\t\tsetState(170);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(171);\n\t\t\t\tmatch(LBRACE);\n\t\t\t\tsetState(172);\n\t\t\t\tfinalFields();\n\t\t\t\tsetState(173);\n\t\t\t\tmatch(RBRACE);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t_localctx = new AssignTypeDefExpContext(_localctx);\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tsetState(175);\n\t\t\t\tmatch(DEFTYPEKEY);\n\t\t\t\tsetState(176);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(177);\n\t\t\t\tmatch(ASSIGN);\n\t\t\t\tsetState(178);\n\t\t\t\t((AssignTypeDefExpContext)_localctx).refer = typeID(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class TypeIDContext extends ParserRuleContext {\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic TypeIDContext typeID() {\n\t\t\treturn getRuleContext(TypeIDContext.class,0);\n\t\t}\n\t\tpublic TerminalNode OPTION() { return getToken(inputParser.OPTION, 0); }\n\t\tpublic TerminalNode LBRACK() { return getToken(inputParser.LBRACK, 0); }\n\t\tpublic TerminalNode RBRACK() { return getToken(inputParser.RBRACK, 0); }\n\t\tpublic TerminalNode INT() { return getToken(inputParser.INT, 0); }\n\t\tpublic TypeIDContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_typeID; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterTypeID(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitTypeID(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitTypeID(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final TypeIDContext typeID() throws RecognitionException {\n\t\treturn typeID(0);\n\t}\n\n\tprivate TypeIDContext typeID(int _p) throws RecognitionException {\n\t\tParserRuleContext _parentctx = _ctx;\n\t\tint _parentState = getState();\n\t\tTypeIDContext _localctx = new TypeIDContext(_ctx, _parentState);\n\t\tTypeIDContext _prevctx = _localctx;\n\t\tint _startState = 20;\n\t\tenterRecursionRule(_localctx, 20, RULE_typeID, _p);\n\t\ttry {\n\t\t\tint _alt;\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\t{\n\t\t\tsetState(182);\n\t\t\tmatch(ID);\n\t\t\t}\n\t\t\t_ctx.stop = _input.LT(-1);\n\t\t\tsetState(195);\n\t\t\t_errHandler.sync(this);\n\t\t\t_alt = getInterpreter().adaptivePredict(_input,11,_ctx);\n\t\t\twhile ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n\t\t\t\tif ( _alt==1 ) {\n\t\t\t\t\tif ( _parseListeners!=null ) triggerExitRuleEvent();\n\t\t\t\t\t_prevctx = _localctx;\n\t\t\t\t\t{\n\t\t\t\t\tsetState(193);\n\t\t\t\t\tswitch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new TypeIDContext(_parentctx, _parentState);\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_typeID);\n\t\t\t\t\t\tsetState(184);\n\t\t\t\t\t\tif (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, \"precpred(_ctx, 3)\");\n\t\t\t\t\t\tsetState(185);\n\t\t\t\t\t\tmatch(OPTION);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new TypeIDContext(_parentctx, _parentState);\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_typeID);\n\t\t\t\t\t\tsetState(186);\n\t\t\t\t\t\tif (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, \"precpred(_ctx, 2)\");\n\t\t\t\t\t\tsetState(187);\n\t\t\t\t\t\tmatch(LBRACK);\n\t\t\t\t\t\tsetState(188);\n\t\t\t\t\t\tmatch(RBRACK);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new TypeIDContext(_parentctx, _parentState);\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_typeID);\n\t\t\t\t\t\tsetState(189);\n\t\t\t\t\t\tif (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, \"precpred(_ctx, 1)\");\n\t\t\t\t\t\tsetState(190);\n\t\t\t\t\t\tmatch(LBRACK);\n\t\t\t\t\t\tsetState(191);\n\t\t\t\t\t\tmatch(INT);\n\t\t\t\t\t\tsetState(192);\n\t\t\t\t\t\tmatch(RBRACK);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\tsetState(197);\n\t\t\t\t_errHandler.sync(this);\n\t\t\t\t_alt = getInterpreter().adaptivePredict(_input,11,_ctx);\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\tunrollRecursionContexts(_parentctx);\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class ParamListContext extends ParserRuleContext {\n\t\tpublic TypeIDContext typeID() {\n\t\t\treturn getRuleContext(TypeIDContext.class,0);\n\t\t}\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic List<ParamRestContext> paramRest() {\n\t\t\treturn getRuleContexts(ParamRestContext.class);\n\t\t}\n\t\tpublic ParamRestContext paramRest(int i) {\n\t\t\treturn getRuleContext(ParamRestContext.class,i);\n\t\t}\n\t\tpublic ParamListContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_paramList; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterParamList(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitParamList(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitParamList(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final ParamListContext paramList() throws RecognitionException {\n\t\tParamListContext _localctx = new ParamListContext(_ctx, getState());\n\t\tenterRule(_localctx, 22, RULE_paramList);\n\t\tint _la;\n\t\ttry {\n\t\t\tsetState(207);\n\t\t\tswitch (_input.LA(1)) {\n\t\t\tcase ID:\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(198);\n\t\t\t\ttypeID(0);\n\t\t\t\tsetState(199);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(203);\n\t\t\t\t_errHandler.sync(this);\n\t\t\t\t_la = _input.LA(1);\n\t\t\t\twhile (_la==COMMA) {\n\t\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\tsetState(200);\n\t\t\t\t\tparamRest();\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsetState(205);\n\t\t\t\t\t_errHandler.sync(this);\n\t\t\t\t\t_la = _input.LA(1);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase RPAREN:\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new NoViableAltException(this);\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class ParamRestContext extends ParserRuleContext {\n\t\tpublic TerminalNode COMMA() { return getToken(inputParser.COMMA, 0); }\n\t\tpublic TypeIDContext typeID() {\n\t\t\treturn getRuleContext(TypeIDContext.class,0);\n\t\t}\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic ParamRestContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_paramRest; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterParamRest(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitParamRest(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitParamRest(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final ParamRestContext paramRest() throws RecognitionException {\n\t\tParamRestContext _localctx = new ParamRestContext(_ctx, getState());\n\t\tenterRule(_localctx, 24, RULE_paramRest);\n\t\ttry {\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tsetState(209);\n\t\t\tmatch(COMMA);\n\t\t\tsetState(210);\n\t\t\ttypeID(0);\n\t\t\tsetState(211);\n\t\t\tmatch(ID);\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class DefVarContext extends ParserRuleContext {\n\t\tpublic TerminalNode DEFVARKEY() { return getToken(inputParser.DEFVARKEY, 0); }\n\t\tpublic List<TerminalNode> ID() { return getTokens(inputParser.ID); }\n\t\tpublic TerminalNode ID(int i) {\n\t\t\treturn getToken(inputParser.ID, i);\n\t\t}\n\t\tpublic TerminalNode ASSIGN() { return getToken(inputParser.ASSIGN, 0); }\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic TerminalNode COLON() { return getToken(inputParser.COLON, 0); }\n\t\tpublic DefVarContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_defVar; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterDefVar(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitDefVar(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitDefVar(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final DefVarContext defVar() throws RecognitionException {\n\t\tDefVarContext _localctx = new DefVarContext(_ctx, getState());\n\t\tenterRule(_localctx, 26, RULE_defVar);\n\t\ttry {\n\t\t\tsetState(227);\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {\n\t\t\tcase 1:\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(213);\n\t\t\t\tmatch(DEFVARKEY);\n\t\t\t\tsetState(214);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(215);\n\t\t\t\tmatch(ASSIGN);\n\t\t\t\tsetState(216);\n\t\t\t\texp(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tsetState(217);\n\t\t\t\tmatch(DEFVARKEY);\n\t\t\t\tsetState(218);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(219);\n\t\t\t\tmatch(COLON);\n\t\t\t\tsetState(220);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(221);\n\t\t\t\tmatch(ASSIGN);\n\t\t\t\tsetState(222);\n\t\t\t\texp(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tenterOuterAlt(_localctx, 3);\n\t\t\t\t{\n\t\t\t\tsetState(223);\n\t\t\t\tmatch(DEFVARKEY);\n\t\t\t\tsetState(224);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(225);\n\t\t\t\tmatch(COLON);\n\t\t\t\tsetState(226);\n\t\t\t\tmatch(ID);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class ParamsContext extends ParserRuleContext {\n\t\tpublic ParamsContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_params; }\n\t \n\t\tpublic ParamsContext() { }\n\t\tpublic void copyFrom(ParamsContext ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\t}\n\tpublic static class MulParamContext extends ParamsContext {\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic TerminalNode COMMA() { return getToken(inputParser.COMMA, 0); }\n\t\tpublic ParamsContext params() {\n\t\t\treturn getRuleContext(ParamsContext.class,0);\n\t\t}\n\t\tpublic MulParamContext(ParamsContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterMulParam(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitMulParam(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitMulParam(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class SingleParamContext extends ParamsContext {\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic SingleParamContext(ParamsContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterSingleParam(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitSingleParam(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitSingleParam(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final ParamsContext params() throws RecognitionException {\n\t\tParamsContext _localctx = new ParamsContext(_ctx, getState());\n\t\tenterRule(_localctx, 28, RULE_params);\n\t\ttry {\n\t\t\tsetState(234);\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t_localctx = new SingleParamContext(_localctx);\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(229);\n\t\t\t\texp(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t_localctx = new MulParamContext(_localctx);\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tsetState(230);\n\t\t\t\texp(0);\n\t\t\t\tsetState(231);\n\t\t\t\tmatch(COMMA);\n\t\t\t\tsetState(232);\n\t\t\t\tparams();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class FuncallExpContext extends ParserRuleContext {\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic TerminalNode LPAREN() { return getToken(inputParser.LPAREN, 0); }\n\t\tpublic TerminalNode RPAREN() { return getToken(inputParser.RPAREN, 0); }\n\t\tpublic ParamsContext params() {\n\t\t\treturn getRuleContext(ParamsContext.class,0);\n\t\t}\n\t\tpublic FuncallExpContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_funcallExp; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterFuncallExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitFuncallExp(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitFuncallExp(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final FuncallExpContext funcallExp() throws RecognitionException {\n\t\tFuncallExpContext _localctx = new FuncallExpContext(_ctx, getState());\n\t\tenterRule(_localctx, 30, RULE_funcallExp);\n\t\ttry {\n\t\t\tsetState(244);\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {\n\t\t\tcase 1:\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(236);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(237);\n\t\t\t\tmatch(LPAREN);\n\t\t\t\tsetState(238);\n\t\t\t\tmatch(RPAREN);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tsetState(239);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(240);\n\t\t\t\tmatch(LPAREN);\n\t\t\t\tsetState(241);\n\t\t\t\tparams();\n\t\t\t\tsetState(242);\n\t\t\t\tmatch(RPAREN);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class LvalueContext extends ParserRuleContext {\n\t\tpublic LvalueContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_lvalue; }\n\t \n\t\tpublic LvalueContext() { }\n\t\tpublic void copyFrom(LvalueContext ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\t}\n\tpublic static class SimpleFieldVarContext extends LvalueContext {\n\t\tpublic List<TerminalNode> ID() { return getTokens(inputParser.ID); }\n\t\tpublic TerminalNode ID(int i) {\n\t\t\treturn getToken(inputParser.ID, i);\n\t\t}\n\t\tpublic TerminalNode DOT() { return getToken(inputParser.DOT, 0); }\n\t\tpublic SimpleFieldVarContext(LvalueContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterSimpleFieldVar(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitSimpleFieldVar(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitSimpleFieldVar(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class SubscriptVarContext extends LvalueContext {\n\t\tpublic LvalueContext lvalue() {\n\t\t\treturn getRuleContext(LvalueContext.class,0);\n\t\t}\n\t\tpublic TerminalNode LBRACK() { return getToken(inputParser.LBRACK, 0); }\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RBRACK() { return getToken(inputParser.RBRACK, 0); }\n\t\tpublic SubscriptVarContext(LvalueContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterSubscriptVar(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitSubscriptVar(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitSubscriptVar(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class SimpleSubscriptVarContext extends LvalueContext {\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic TerminalNode LBRACK() { return getToken(inputParser.LBRACK, 0); }\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RBRACK() { return getToken(inputParser.RBRACK, 0); }\n\t\tpublic SimpleSubscriptVarContext(LvalueContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterSimpleSubscriptVar(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitSimpleSubscriptVar(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitSimpleSubscriptVar(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class FieldVarContext extends LvalueContext {\n\t\tpublic LvalueContext lvalue() {\n\t\t\treturn getRuleContext(LvalueContext.class,0);\n\t\t}\n\t\tpublic TerminalNode DOT() { return getToken(inputParser.DOT, 0); }\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic FieldVarContext(LvalueContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterFieldVar(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitFieldVar(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitFieldVar(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final LvalueContext lvalue() throws RecognitionException {\n\t\treturn lvalue(0);\n\t}\n\n\tprivate LvalueContext lvalue(int _p) throws RecognitionException {\n\t\tParserRuleContext _parentctx = _ctx;\n\t\tint _parentState = getState();\n\t\tLvalueContext _localctx = new LvalueContext(_ctx, _parentState);\n\t\tLvalueContext _prevctx = _localctx;\n\t\tint _startState = 32;\n\t\tenterRecursionRule(_localctx, 32, RULE_lvalue, _p);\n\t\ttry {\n\t\t\tint _alt;\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tsetState(255);\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t{\n\t\t\t\t_localctx = new SimpleFieldVarContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\n\t\t\t\tsetState(247);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(248);\n\t\t\t\tmatch(DOT);\n\t\t\t\tsetState(249);\n\t\t\t\tmatch(ID);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t{\n\t\t\t\t_localctx = new SimpleSubscriptVarContext(_localctx);\n\t\t\t\t_ctx = _localctx;\n\t\t\t\t_prevctx = _localctx;\n\t\t\t\tsetState(250);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(251);\n\t\t\t\tmatch(LBRACK);\n\t\t\t\tsetState(252);\n\t\t\t\texp(0);\n\t\t\t\tsetState(253);\n\t\t\t\tmatch(RBRACK);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t_ctx.stop = _input.LT(-1);\n\t\t\tsetState(267);\n\t\t\t_errHandler.sync(this);\n\t\t\t_alt = getInterpreter().adaptivePredict(_input,19,_ctx);\n\t\t\twhile ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n\t\t\t\tif ( _alt==1 ) {\n\t\t\t\t\tif ( _parseListeners!=null ) triggerExitRuleEvent();\n\t\t\t\t\t_prevctx = _localctx;\n\t\t\t\t\t{\n\t\t\t\t\tsetState(265);\n\t\t\t\t\tswitch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new FieldVarContext(new LvalueContext(_parentctx, _parentState));\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_lvalue);\n\t\t\t\t\t\tsetState(257);\n\t\t\t\t\t\tif (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, \"precpred(_ctx, 2)\");\n\t\t\t\t\t\tsetState(258);\n\t\t\t\t\t\tmatch(DOT);\n\t\t\t\t\t\tsetState(259);\n\t\t\t\t\t\tmatch(ID);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t_localctx = new SubscriptVarContext(new LvalueContext(_parentctx, _parentState));\n\t\t\t\t\t\tpushNewRecursionContext(_localctx, _startState, RULE_lvalue);\n\t\t\t\t\t\tsetState(260);\n\t\t\t\t\t\tif (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, \"precpred(_ctx, 1)\");\n\t\t\t\t\t\tsetState(261);\n\t\t\t\t\t\tmatch(LBRACK);\n\t\t\t\t\t\tsetState(262);\n\t\t\t\t\t\texp(0);\n\t\t\t\t\t\tsetState(263);\n\t\t\t\t\t\tmatch(RBRACK);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\tsetState(269);\n\t\t\t\t_errHandler.sync(this);\n\t\t\t\t_alt = getInterpreter().adaptivePredict(_input,19,_ctx);\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\tunrollRecursionContexts(_parentctx);\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class InitArrayContext extends ParserRuleContext {\n\t\tpublic List<ExpContext> exp() {\n\t\t\treturn getRuleContexts(ExpContext.class);\n\t\t}\n\t\tpublic ExpContext exp(int i) {\n\t\t\treturn getRuleContext(ExpContext.class,i);\n\t\t}\n\t\tpublic List<TerminalNode> COMMA() { return getTokens(inputParser.COMMA); }\n\t\tpublic TerminalNode COMMA(int i) {\n\t\t\treturn getToken(inputParser.COMMA, i);\n\t\t}\n\t\tpublic InitArrayContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_initArray; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterInitArray(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitInitArray(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitInitArray(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final InitArrayContext initArray() throws RecognitionException {\n\t\tInitArrayContext _localctx = new InitArrayContext(_ctx, getState());\n\t\tenterRule(_localctx, 34, RULE_initArray);\n\t\tint _la;\n\t\ttry {\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tsetState(270);\n\t\t\texp(0);\n\t\t\tsetState(275);\n\t\t\t_errHandler.sync(this);\n\t\t\t_la = _input.LA(1);\n\t\t\twhile (_la==COMMA) {\n\t\t\t\t{\n\t\t\t\t{\n\t\t\t\tsetState(271);\n\t\t\t\tmatch(COMMA);\n\t\t\t\tsetState(272);\n\t\t\t\texp(0);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsetState(277);\n\t\t\t\t_errHandler.sync(this);\n\t\t\t\t_la = _input.LA(1);\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class AssignContext extends ParserRuleContext {\n\t\tpublic AssignContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_assign; }\n\t \n\t\tpublic AssignContext() { }\n\t\tpublic void copyFrom(AssignContext ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\t}\n\tpublic static class LvalueAssignContext extends AssignContext {\n\t\tpublic LvalueContext lvalue() {\n\t\t\treturn getRuleContext(LvalueContext.class,0);\n\t\t}\n\t\tpublic TerminalNode ASSIGN() { return getToken(inputParser.ASSIGN, 0); }\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic LvalueAssignContext(AssignContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterLvalueAssign(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitLvalueAssign(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitLvalueAssign(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class InitArrayAssignContext extends AssignContext {\n\t\tpublic LvalueContext lvalue() {\n\t\t\treturn getRuleContext(LvalueContext.class,0);\n\t\t}\n\t\tpublic TerminalNode ASSIGN() { return getToken(inputParser.ASSIGN, 0); }\n\t\tpublic TerminalNode LBRACE() { return getToken(inputParser.LBRACE, 0); }\n\t\tpublic InitArrayContext initArray() {\n\t\t\treturn getRuleContext(InitArrayContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RBRACE() { return getToken(inputParser.RBRACE, 0); }\n\t\tpublic InitArrayAssignContext(AssignContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterInitArrayAssign(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitInitArrayAssign(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitInitArrayAssign(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class SimpleInitArrayAssignContext extends AssignContext {\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic TerminalNode ASSIGN() { return getToken(inputParser.ASSIGN, 0); }\n\t\tpublic TerminalNode LBRACE() { return getToken(inputParser.LBRACE, 0); }\n\t\tpublic InitArrayContext initArray() {\n\t\t\treturn getRuleContext(InitArrayContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RBRACE() { return getToken(inputParser.RBRACE, 0); }\n\t\tpublic SimpleInitArrayAssignContext(AssignContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterSimpleInitArrayAssign(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitSimpleInitArrayAssign(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitSimpleInitArrayAssign(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\tpublic static class SimpleAssignContext extends AssignContext {\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic TerminalNode ASSIGN() { return getToken(inputParser.ASSIGN, 0); }\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic SimpleAssignContext(AssignContext ctx) { copyFrom(ctx); }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterSimpleAssign(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitSimpleAssign(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitSimpleAssign(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final AssignContext assign() throws RecognitionException {\n\t\tAssignContext _localctx = new AssignContext(_ctx, getState());\n\t\tenterRule(_localctx, 36, RULE_assign);\n\t\ttry {\n\t\t\tsetState(297);\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t_localctx = new SimpleAssignContext(_localctx);\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(278);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(279);\n\t\t\t\tmatch(ASSIGN);\n\t\t\t\tsetState(280);\n\t\t\t\texp(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t_localctx = new LvalueAssignContext(_localctx);\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tsetState(281);\n\t\t\t\tlvalue(0);\n\t\t\t\tsetState(282);\n\t\t\t\tmatch(ASSIGN);\n\t\t\t\tsetState(283);\n\t\t\t\texp(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t_localctx = new InitArrayAssignContext(_localctx);\n\t\t\t\tenterOuterAlt(_localctx, 3);\n\t\t\t\t{\n\t\t\t\tsetState(285);\n\t\t\t\tlvalue(0);\n\t\t\t\tsetState(286);\n\t\t\t\tmatch(ASSIGN);\n\t\t\t\tsetState(287);\n\t\t\t\tmatch(LBRACE);\n\t\t\t\tsetState(288);\n\t\t\t\tinitArray();\n\t\t\t\tsetState(289);\n\t\t\t\tmatch(RBRACE);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t_localctx = new SimpleInitArrayAssignContext(_localctx);\n\t\t\t\tenterOuterAlt(_localctx, 4);\n\t\t\t\t{\n\t\t\t\tsetState(291);\n\t\t\t\tmatch(ID);\n\t\t\t\tsetState(292);\n\t\t\t\tmatch(ASSIGN);\n\t\t\t\tsetState(293);\n\t\t\t\tmatch(LBRACE);\n\t\t\t\tsetState(294);\n\t\t\t\tinitArray();\n\t\t\t\tsetState(295);\n\t\t\t\tmatch(RBRACE);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class IfStmtContext extends ParserRuleContext {\n\t\tpublic ExpContext condExp;\n\t\tpublic StmtsContext op1;\n\t\tpublic StmtsContext op2;\n\t\tpublic TerminalNode IF() { return getToken(inputParser.IF, 0); }\n\t\tpublic TerminalNode LPAREN() { return getToken(inputParser.LPAREN, 0); }\n\t\tpublic TerminalNode RPAREN() { return getToken(inputParser.RPAREN, 0); }\n\t\tpublic TerminalNode THEN() { return getToken(inputParser.THEN, 0); }\n\t\tpublic TerminalNode ELSE() { return getToken(inputParser.ELSE, 0); }\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic List<StmtsContext> stmts() {\n\t\t\treturn getRuleContexts(StmtsContext.class);\n\t\t}\n\t\tpublic StmtsContext stmts(int i) {\n\t\t\treturn getRuleContext(StmtsContext.class,i);\n\t\t}\n\t\tpublic IfStmtContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_ifStmt; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterIfStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitIfStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitIfStmt(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final IfStmtContext ifStmt() throws RecognitionException {\n\t\tIfStmtContext _localctx = new IfStmtContext(_ctx, getState());\n\t\tenterRule(_localctx, 38, RULE_ifStmt);\n\t\ttry {\n\t\t\tsetState(315);\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {\n\t\t\tcase 1:\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(299);\n\t\t\t\tmatch(IF);\n\t\t\t\tsetState(300);\n\t\t\t\tmatch(LPAREN);\n\t\t\t\tsetState(301);\n\t\t\t\t((IfStmtContext)_localctx).condExp = exp(0);\n\t\t\t\tsetState(302);\n\t\t\t\tmatch(RPAREN);\n\t\t\t\tsetState(303);\n\t\t\t\tmatch(THEN);\n\t\t\t\tsetState(304);\n\t\t\t\t((IfStmtContext)_localctx).op1 = stmts();\n\t\t\t\tsetState(305);\n\t\t\t\tmatch(ELSE);\n\t\t\t\tsetState(306);\n\t\t\t\t((IfStmtContext)_localctx).op2 = stmts();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tsetState(308);\n\t\t\t\tmatch(IF);\n\t\t\t\tsetState(309);\n\t\t\t\tmatch(LPAREN);\n\t\t\t\tsetState(310);\n\t\t\t\t((IfStmtContext)_localctx).condExp = exp(0);\n\t\t\t\tsetState(311);\n\t\t\t\tmatch(RPAREN);\n\t\t\t\tsetState(312);\n\t\t\t\tmatch(THEN);\n\t\t\t\tsetState(313);\n\t\t\t\t((IfStmtContext)_localctx).op1 = stmts();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class WhileStmtContext extends ParserRuleContext {\n\t\tpublic TerminalNode WHILE() { return getToken(inputParser.WHILE, 0); }\n\t\tpublic TerminalNode LPAREN() { return getToken(inputParser.LPAREN, 0); }\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RPAREN() { return getToken(inputParser.RPAREN, 0); }\n\t\tpublic TerminalNode DO() { return getToken(inputParser.DO, 0); }\n\t\tpublic StmtsContext stmts() {\n\t\t\treturn getRuleContext(StmtsContext.class,0);\n\t\t}\n\t\tpublic WhileStmtContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_whileStmt; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterWhileStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitWhileStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitWhileStmt(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final WhileStmtContext whileStmt() throws RecognitionException {\n\t\tWhileStmtContext _localctx = new WhileStmtContext(_ctx, getState());\n\t\tenterRule(_localctx, 40, RULE_whileStmt);\n\t\ttry {\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tsetState(317);\n\t\t\tmatch(WHILE);\n\t\t\tsetState(318);\n\t\t\tmatch(LPAREN);\n\t\t\tsetState(319);\n\t\t\texp(0);\n\t\t\tsetState(320);\n\t\t\tmatch(RPAREN);\n\t\t\tsetState(321);\n\t\t\tmatch(DO);\n\t\t\tsetState(322);\n\t\t\tstmts();\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class ForStmtContext extends ParserRuleContext {\n\t\tpublic TerminalNode FOR() { return getToken(inputParser.FOR, 0); }\n\t\tpublic TerminalNode LPAREN() { return getToken(inputParser.LPAREN, 0); }\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic TerminalNode COLON() { return getToken(inputParser.COLON, 0); }\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RPAREN() { return getToken(inputParser.RPAREN, 0); }\n\t\tpublic StmtsContext stmts() {\n\t\t\treturn getRuleContext(StmtsContext.class,0);\n\t\t}\n\t\tpublic ForStmtContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_forStmt; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterForStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitForStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitForStmt(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final ForStmtContext forStmt() throws RecognitionException {\n\t\tForStmtContext _localctx = new ForStmtContext(_ctx, getState());\n\t\tenterRule(_localctx, 42, RULE_forStmt);\n\t\ttry {\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tsetState(324);\n\t\t\tmatch(FOR);\n\t\t\tsetState(325);\n\t\t\tmatch(LPAREN);\n\t\t\tsetState(326);\n\t\t\tmatch(ID);\n\t\t\tsetState(327);\n\t\t\tmatch(COLON);\n\t\t\tsetState(328);\n\t\t\texp(0);\n\t\t\tsetState(329);\n\t\t\tmatch(RPAREN);\n\t\t\tsetState(330);\n\t\t\tstmts();\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class PrintStmtContext extends ParserRuleContext {\n\t\tpublic TerminalNode PRINT() { return getToken(inputParser.PRINT, 0); }\n\t\tpublic TerminalNode LPAREN() { return getToken(inputParser.LPAREN, 0); }\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RPAREN() { return getToken(inputParser.RPAREN, 0); }\n\t\tpublic TerminalNode SEMICOLON() { return getToken(inputParser.SEMICOLON, 0); }\n\t\tpublic PrintStmtContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_printStmt; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterPrintStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitPrintStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitPrintStmt(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final PrintStmtContext printStmt() throws RecognitionException {\n\t\tPrintStmtContext _localctx = new PrintStmtContext(_ctx, getState());\n\t\tenterRule(_localctx, 44, RULE_printStmt);\n\t\ttry {\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tsetState(332);\n\t\t\tmatch(PRINT);\n\t\t\tsetState(333);\n\t\t\tmatch(LPAREN);\n\t\t\tsetState(334);\n\t\t\texp(0);\n\t\t\tsetState(335);\n\t\t\tmatch(RPAREN);\n\t\t\tsetState(336);\n\t\t\tmatch(SEMICOLON);\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class ReturnStmtContext extends ParserRuleContext {\n\t\tpublic TerminalNode RETURN() { return getToken(inputParser.RETURN, 0); }\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic TerminalNode SEMICOLON() { return getToken(inputParser.SEMICOLON, 0); }\n\t\tpublic ReturnStmtContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_returnStmt; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterReturnStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitReturnStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitReturnStmt(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final ReturnStmtContext returnStmt() throws RecognitionException {\n\t\tReturnStmtContext _localctx = new ReturnStmtContext(_ctx, getState());\n\t\tenterRule(_localctx, 46, RULE_returnStmt);\n\t\ttry {\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tsetState(338);\n\t\t\tmatch(RETURN);\n\t\t\tsetState(339);\n\t\t\texp(0);\n\t\t\tsetState(340);\n\t\t\tmatch(SEMICOLON);\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class ExpStmtContext extends ParserRuleContext {\n\t\tpublic ExpContext exp() {\n\t\t\treturn getRuleContext(ExpContext.class,0);\n\t\t}\n\t\tpublic TerminalNode SEMICOLON() { return getToken(inputParser.SEMICOLON, 0); }\n\t\tpublic ExpStmtContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_expStmt; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterExpStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitExpStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitExpStmt(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final ExpStmtContext expStmt() throws RecognitionException {\n\t\tExpStmtContext _localctx = new ExpStmtContext(_ctx, getState());\n\t\tenterRule(_localctx, 48, RULE_expStmt);\n\t\ttry {\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tsetState(342);\n\t\t\texp(0);\n\t\t\tsetState(343);\n\t\t\tmatch(SEMICOLON);\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class DecStmtContext extends ParserRuleContext {\n\t\tpublic DefVarContext defVar() {\n\t\t\treturn getRuleContext(DefVarContext.class,0);\n\t\t}\n\t\tpublic TerminalNode SEMICOLON() { return getToken(inputParser.SEMICOLON, 0); }\n\t\tpublic DecStmtContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_decStmt; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterDecStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitDecStmt(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitDecStmt(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final DecStmtContext decStmt() throws RecognitionException {\n\t\tDecStmtContext _localctx = new DecStmtContext(_ctx, getState());\n\t\tenterRule(_localctx, 50, RULE_decStmt);\n\t\ttry {\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tsetState(345);\n\t\t\tdefVar();\n\t\t\tsetState(346);\n\t\t\tmatch(SEMICOLON);\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class StmtsContext extends ParserRuleContext {\n\t\tpublic TerminalNode LBRACE() { return getToken(inputParser.LBRACE, 0); }\n\t\tpublic TerminalNode RBRACE() { return getToken(inputParser.RBRACE, 0); }\n\t\tpublic List<StmtsContext> stmts() {\n\t\t\treturn getRuleContexts(StmtsContext.class);\n\t\t}\n\t\tpublic StmtsContext stmts(int i) {\n\t\t\treturn getRuleContext(StmtsContext.class,i);\n\t\t}\n\t\tpublic IfStmtContext ifStmt() {\n\t\t\treturn getRuleContext(IfStmtContext.class,0);\n\t\t}\n\t\tpublic WhileStmtContext whileStmt() {\n\t\t\treturn getRuleContext(WhileStmtContext.class,0);\n\t\t}\n\t\tpublic ForStmtContext forStmt() {\n\t\t\treturn getRuleContext(ForStmtContext.class,0);\n\t\t}\n\t\tpublic PrintStmtContext printStmt() {\n\t\t\treturn getRuleContext(PrintStmtContext.class,0);\n\t\t}\n\t\tpublic ReturnStmtContext returnStmt() {\n\t\t\treturn getRuleContext(ReturnStmtContext.class,0);\n\t\t}\n\t\tpublic DecStmtContext decStmt() {\n\t\t\treturn getRuleContext(DecStmtContext.class,0);\n\t\t}\n\t\tpublic TerminalNode BREAK() { return getToken(inputParser.BREAK, 0); }\n\t\tpublic TerminalNode SEMICOLON() { return getToken(inputParser.SEMICOLON, 0); }\n\t\tpublic ExpStmtContext expStmt() {\n\t\t\treturn getRuleContext(ExpStmtContext.class,0);\n\t\t}\n\t\tpublic StmtsContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_stmts; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterStmts(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitStmts(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitStmts(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final StmtsContext stmts() throws RecognitionException {\n\t\tStmtsContext _localctx = new StmtsContext(_ctx, getState());\n\t\tenterRule(_localctx, 52, RULE_stmts);\n\t\ttry {\n\t\t\tint _alt;\n\t\t\tsetState(365);\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {\n\t\t\tcase 1:\n\t\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tsetState(348);\n\t\t\t\tmatch(LBRACE);\n\t\t\t\tsetState(352);\n\t\t\t\t_errHandler.sync(this);\n\t\t\t\t_alt = getInterpreter().adaptivePredict(_input,23,_ctx);\n\t\t\t\twhile ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n\t\t\t\t\tif ( _alt==1 ) {\n\t\t\t\t\t\t{\n\t\t\t\t\t\t{\n\t\t\t\t\t\tsetState(349);\n\t\t\t\t\t\tstmts();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\t\t\t\t\tsetState(354);\n\t\t\t\t\t_errHandler.sync(this);\n\t\t\t\t\t_alt = getInterpreter().adaptivePredict(_input,23,_ctx);\n\t\t\t\t}\n\t\t\t\tsetState(355);\n\t\t\t\tmatch(RBRACE);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tenterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tsetState(356);\n\t\t\t\tifStmt();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tenterOuterAlt(_localctx, 3);\n\t\t\t\t{\n\t\t\t\tsetState(357);\n\t\t\t\twhileStmt();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tenterOuterAlt(_localctx, 4);\n\t\t\t\t{\n\t\t\t\tsetState(358);\n\t\t\t\tforStmt();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tenterOuterAlt(_localctx, 5);\n\t\t\t\t{\n\t\t\t\tsetState(359);\n\t\t\t\tprintStmt();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tenterOuterAlt(_localctx, 6);\n\t\t\t\t{\n\t\t\t\tsetState(360);\n\t\t\t\treturnStmt();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tenterOuterAlt(_localctx, 7);\n\t\t\t\t{\n\t\t\t\tsetState(361);\n\t\t\t\tdecStmt();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\tenterOuterAlt(_localctx, 8);\n\t\t\t\t{\n\t\t\t\tsetState(362);\n\t\t\t\tmatch(BREAK);\n\t\t\t\tsetState(363);\n\t\t\t\tmatch(SEMICOLON);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\tenterOuterAlt(_localctx, 9);\n\t\t\t\t{\n\t\t\t\tsetState(364);\n\t\t\t\texpStmt();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static class DefFunContext extends ParserRuleContext {\n\t\tpublic TerminalNode DEFFUNKEY() { return getToken(inputParser.DEFFUNKEY, 0); }\n\t\tpublic TypeIDContext typeID() {\n\t\t\treturn getRuleContext(TypeIDContext.class,0);\n\t\t}\n\t\tpublic TerminalNode ID() { return getToken(inputParser.ID, 0); }\n\t\tpublic TerminalNode LPAREN() { return getToken(inputParser.LPAREN, 0); }\n\t\tpublic ParamListContext paramList() {\n\t\t\treturn getRuleContext(ParamListContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RPAREN() { return getToken(inputParser.RPAREN, 0); }\n\t\tpublic TerminalNode LBRACE() { return getToken(inputParser.LBRACE, 0); }\n\t\tpublic ReturnStmtContext returnStmt() {\n\t\t\treturn getRuleContext(ReturnStmtContext.class,0);\n\t\t}\n\t\tpublic TerminalNode RBRACE() { return getToken(inputParser.RBRACE, 0); }\n\t\tpublic List<DecStmtContext> decStmt() {\n\t\t\treturn getRuleContexts(DecStmtContext.class);\n\t\t}\n\t\tpublic DecStmtContext decStmt(int i) {\n\t\t\treturn getRuleContext(DecStmtContext.class,i);\n\t\t}\n\t\tpublic List<StmtsContext> stmts() {\n\t\t\treturn getRuleContexts(StmtsContext.class);\n\t\t}\n\t\tpublic StmtsContext stmts(int i) {\n\t\t\treturn getRuleContext(StmtsContext.class,i);\n\t\t}\n\t\tpublic DefFunContext(ParserRuleContext parent, int invokingState) {\n\t\t\tsuper(parent, invokingState);\n\t\t}\n\t\t@Override public int getRuleIndex() { return RULE_defFun; }\n\t\t@Override\n\t\tpublic void enterRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).enterDefFun(this);\n\t\t}\n\t\t@Override\n\t\tpublic void exitRule(ParseTreeListener listener) {\n\t\t\tif ( listener instanceof inputListener ) ((inputListener)listener).exitDefFun(this);\n\t\t}\n\t\t@Override\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\n\t\t\tif ( visitor instanceof inputVisitor ) return ((inputVisitor<? extends T>)visitor).visitDefFun(this);\n\t\t\telse return visitor.visitChildren(this);\n\t\t}\n\t}\n\n\tpublic final DefFunContext defFun() throws RecognitionException {\n\t\tDefFunContext _localctx = new DefFunContext(_ctx, getState());\n\t\tenterRule(_localctx, 54, RULE_defFun);\n\t\ttry {\n\t\t\tint _alt;\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tsetState(367);\n\t\t\tmatch(DEFFUNKEY);\n\t\t\tsetState(368);\n\t\t\ttypeID(0);\n\t\t\tsetState(369);\n\t\t\tmatch(ID);\n\t\t\tsetState(370);\n\t\t\tmatch(LPAREN);\n\t\t\tsetState(371);\n\t\t\tparamList();\n\t\t\tsetState(372);\n\t\t\tmatch(RPAREN);\n\t\t\tsetState(373);\n\t\t\tmatch(LBRACE);\n\t\t\tsetState(377);\n\t\t\t_errHandler.sync(this);\n\t\t\t_alt = getInterpreter().adaptivePredict(_input,25,_ctx);\n\t\t\twhile ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n\t\t\t\tif ( _alt==1 ) {\n\t\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\tsetState(374);\n\t\t\t\t\tdecStmt();\n\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\tsetState(379);\n\t\t\t\t_errHandler.sync(this);\n\t\t\t\t_alt = getInterpreter().adaptivePredict(_input,25,_ctx);\n\t\t\t}\n\t\t\tsetState(383);\n\t\t\t_errHandler.sync(this);\n\t\t\t_alt = getInterpreter().adaptivePredict(_input,26,_ctx);\n\t\t\twhile ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n\t\t\t\tif ( _alt==1 ) {\n\t\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\tsetState(380);\n\t\t\t\t\tstmts();\n\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\tsetState(385);\n\t\t\t\t_errHandler.sync(this);\n\t\t\t\t_alt = getInterpreter().adaptivePredict(_input,26,_ctx);\n\t\t\t}\n\t\t\tsetState(386);\n\t\t\treturnStmt();\n\t\t\tsetState(387);\n\t\t\tmatch(RBRACE);\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {\n\t\tswitch (ruleIndex) {\n\t\tcase 2:\n\t\t\treturn exp_sempred((ExpContext)_localctx, predIndex);\n\t\tcase 10:\n\t\t\treturn typeID_sempred((TypeIDContext)_localctx, predIndex);\n\t\tcase 16:\n\t\t\treturn lvalue_sempred((LvalueContext)_localctx, predIndex);\n\t\t}\n\t\treturn true;\n\t}\n\tprivate boolean exp_sempred(ExpContext _localctx, int predIndex) {\n\t\tswitch (predIndex) {\n\t\tcase 0:\n\t\t\treturn precpred(_ctx, 23);\n\t\tcase 1:\n\t\t\treturn precpred(_ctx, 22);\n\t\tcase 2:\n\t\t\treturn precpred(_ctx, 21);\n\t\tcase 3:\n\t\t\treturn precpred(_ctx, 20);\n\t\tcase 4:\n\t\t\treturn precpred(_ctx, 19);\n\t\tcase 5:\n\t\t\treturn precpred(_ctx, 16);\n\t\tcase 6:\n\t\t\treturn precpred(_ctx, 15);\n\t\t}\n\t\treturn true;\n\t}\n\tprivate boolean typeID_sempred(TypeIDContext _localctx, int predIndex) {\n\t\tswitch (predIndex) {\n\t\tcase 7:\n\t\t\treturn precpred(_ctx, 3);\n\t\tcase 8:\n\t\t\treturn precpred(_ctx, 2);\n\t\tcase 9:\n\t\t\treturn precpred(_ctx, 1);\n\t\t}\n\t\treturn true;\n\t}\n\tprivate boolean lvalue_sempred(LvalueContext _localctx, int predIndex) {\n\t\tswitch (predIndex) {\n\t\tcase 10:\n\t\t\treturn precpred(_ctx, 2);\n\t\tcase 11:\n\t\t\treturn precpred(_ctx, 1);\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static final String _serializedATN =\n\t\t\"\\3\\u0430\\ud6d1\\u8206\\uad2d\\u4417\\uaef1\\u8d80\\uaadd\\39\\u0188\\4\\2\\t\\2\\4\"+\n\t\t\"\\3\\t\\3\\4\\4\\t\\4\\4\\5\\t\\5\\4\\6\\t\\6\\4\\7\\t\\7\\4\\b\\t\\b\\4\\t\\t\\t\\4\\n\\t\\n\\4\\13\\t\"+\n\t\t\"\\13\\4\\f\\t\\f\\4\\r\\t\\r\\4\\16\\t\\16\\4\\17\\t\\17\\4\\20\\t\\20\\4\\21\\t\\21\\4\\22\\t\\22\"+\n\t\t\"\\4\\23\\t\\23\\4\\24\\t\\24\\4\\25\\t\\25\\4\\26\\t\\26\\4\\27\\t\\27\\4\\30\\t\\30\\4\\31\\t\\31\"+\n\t\t\"\\4\\32\\t\\32\\4\\33\\t\\33\\4\\34\\t\\34\\4\\35\\t\\35\\3\\2\\3\\2\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\5\"+\n\t\t\"\\3B\\n\\3\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\"+\n\t\t\"\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\5\\4\"+\n\t\t\"d\\n\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\"+\n\t\t\"\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\7\\4\\u0082\\n\\4\\f\\4\\16\"+\n\t\t\"\\4\\u0085\\13\\4\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\5\\5\\u0090\\n\\5\\3\\6\\3\"+\n\t\t\"\\6\\3\\6\\5\\6\\u0095\\n\\6\\3\\7\\3\\7\\3\\7\\3\\7\\5\\7\\u009b\\n\\7\\3\\b\\3\\b\\3\\b\\3\\b\\3\\t\"+\n\t\t\"\\3\\t\\3\\t\\3\\t\\3\\t\\5\\t\\u00a6\\n\\t\\3\\n\\3\\n\\5\\n\\u00aa\\n\\n\\3\\13\\3\\13\\3\\13\\3\"+\n\t\t\"\\13\\3\\13\\3\\13\\3\\13\\3\\13\\3\\13\\3\\13\\5\\13\\u00b6\\n\\13\\3\\f\\3\\f\\3\\f\\3\\f\\3\\f\"+\n\t\t\"\\3\\f\\3\\f\\3\\f\\3\\f\\3\\f\\3\\f\\3\\f\\7\\f\\u00c4\\n\\f\\f\\f\\16\\f\\u00c7\\13\\f\\3\\r\\3\\r\"+\n\t\t\"\\3\\r\\7\\r\\u00cc\\n\\r\\f\\r\\16\\r\\u00cf\\13\\r\\3\\r\\5\\r\\u00d2\\n\\r\\3\\16\\3\\16\\3\\16\"+\n\t\t\"\\3\\16\\3\\17\\3\\17\\3\\17\\3\\17\\3\\17\\3\\17\\3\\17\\3\\17\\3\\17\\3\\17\\3\\17\\3\\17\\3\\17\"+\n\t\t\"\\3\\17\\5\\17\\u00e6\\n\\17\\3\\20\\3\\20\\3\\20\\3\\20\\3\\20\\5\\20\\u00ed\\n\\20\\3\\21\\3\"+\n\t\t\"\\21\\3\\21\\3\\21\\3\\21\\3\\21\\3\\21\\3\\21\\5\\21\\u00f7\\n\\21\\3\\22\\3\\22\\3\\22\\3\\22\"+\n\t\t\"\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\\5\\22\\u0102\\n\\22\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\\3\\22\"+\n\t\t\"\\3\\22\\3\\22\\7\\22\\u010c\\n\\22\\f\\22\\16\\22\\u010f\\13\\22\\3\\23\\3\\23\\3\\23\\7\\23\"+\n\t\t\"\\u0114\\n\\23\\f\\23\\16\\23\\u0117\\13\\23\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\"+\n\t\t\"\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\3\\24\\5\\24\\u012c\"+\n\t\t\"\\n\\24\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\\3\\25\"+\n\t\t\"\\3\\25\\3\\25\\3\\25\\5\\25\\u013e\\n\\25\\3\\26\\3\\26\\3\\26\\3\\26\\3\\26\\3\\26\\3\\26\\3\\27\"+\n\t\t\"\\3\\27\\3\\27\\3\\27\\3\\27\\3\\27\\3\\27\\3\\27\\3\\30\\3\\30\\3\\30\\3\\30\\3\\30\\3\\30\\3\\31\"+\n\t\t\"\\3\\31\\3\\31\\3\\31\\3\\32\\3\\32\\3\\32\\3\\33\\3\\33\\3\\33\\3\\34\\3\\34\\7\\34\\u0161\\n\\34\"+\n\t\t\"\\f\\34\\16\\34\\u0164\\13\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\\34\\3\"+\n\t\t\"\\34\\5\\34\\u0170\\n\\34\\3\\35\\3\\35\\3\\35\\3\\35\\3\\35\\3\\35\\3\\35\\3\\35\\7\\35\\u017a\"+\n\t\t\"\\n\\35\\f\\35\\16\\35\\u017d\\13\\35\\3\\35\\7\\35\\u0180\\n\\35\\f\\35\\16\\35\\u0183\\13\"+\n\t\t\"\\35\\3\\35\\3\\35\\3\\35\\3\\35\\2\\5\\6\\26\\\"\\36\\2\\4\\6\\b\\n\\f\\16\\20\\22\\24\\26\\30\\32\"+\n\t\t\"\\34\\36 \\\"$&(*,.\\60\\62\\64\\668\\2\\6\\3\\2\\n\\13\\3\\2\\b\\t\\3\\2\\21\\22\\4\\2\\6\\7\\f\"+\n\t\t\"\\17\\u01a8\\2:\\3\\2\\2\\2\\4A\\3\\2\\2\\2\\6c\\3\\2\\2\\2\\b\\u008f\\3\\2\\2\\2\\n\\u0094\\3\\2\"+\n\t\t\"\\2\\2\\f\\u009a\\3\\2\\2\\2\\16\\u009c\\3\\2\\2\\2\\20\\u00a5\\3\\2\\2\\2\\22\\u00a9\\3\\2\\2\"+\n\t\t\"\\2\\24\\u00b5\\3\\2\\2\\2\\26\\u00b7\\3\\2\\2\\2\\30\\u00d1\\3\\2\\2\\2\\32\\u00d3\\3\\2\\2\\2\"+\n\t\t\"\\34\\u00e5\\3\\2\\2\\2\\36\\u00ec\\3\\2\\2\\2 \\u00f6\\3\\2\\2\\2\\\"\\u0101\\3\\2\\2\\2$\\u0110\"+\n\t\t\"\\3\\2\\2\\2&\\u012b\\3\\2\\2\\2(\\u013d\\3\\2\\2\\2*\\u013f\\3\\2\\2\\2,\\u0146\\3\\2\\2\\2.\"+\n\t\t\"\\u014e\\3\\2\\2\\2\\60\\u0154\\3\\2\\2\\2\\62\\u0158\\3\\2\\2\\2\\64\\u015b\\3\\2\\2\\2\\66\\u016f\"+\n\t\t\"\\3\\2\\2\\28\\u0171\\3\\2\\2\\2:;\\5\\6\\4\\2;\\3\\3\\2\\2\\2<B\\5\\6\\4\\2=>\\5\\6\\4\\2>?\\7\\34\"+\n\t\t\"\\2\\2?@\\5\\4\\3\\2@B\\3\\2\\2\\2A<\\3\\2\\2\\2A=\\3\\2\\2\\2B\\5\\3\\2\\2\\2CD\\b\\4\\1\\2DE\\7\"+\n\t\t\"\\4\\2\\2Ed\\5\\6\\4\\13FG\\7\\t\\2\\2Gd\\5\\6\\4\\nHd\\7\\37\\2\\2Id\\7 \\2\\2JK\\7\\26\\2\\2K\"+\n\t\t\"L\\5\\6\\4\\2LM\\7\\27\\2\\2Md\\3\\2\\2\\2Nd\\7\\67\\2\\2Od\\7\\66\\2\\2Pd\\78\\2\\2Qd\\5\\b\\5\"+\n\t\t\"\\2Rd\\7+\\2\\2Sd\\7,\\2\\2Td\\5\\f\\7\\2Ud\\3\\2\\2\\2VW\\7\\32\\2\\2WX\\5\\4\\3\\2XY\\7\\33\\2\"+\n\t\t\"\\2Yd\\3\\2\\2\\2Zd\\5 \\21\\2[\\\\\\7\\65\\2\\2\\\\]\\7\\67\\2\\2]^\\7\\32\\2\\2^_\\5\\22\\n\\2_\"+\n\t\t\"`\\7\\33\\2\\2`d\\3\\2\\2\\2ad\\5\\\"\\22\\2bd\\5&\\24\\2cC\\3\\2\\2\\2cF\\3\\2\\2\\2cH\\3\\2\\2\"+\n\t\t\"\\2cI\\3\\2\\2\\2cJ\\3\\2\\2\\2cN\\3\\2\\2\\2cO\\3\\2\\2\\2cP\\3\\2\\2\\2cQ\\3\\2\\2\\2cR\\3\\2\\2\"+\n\t\t\"\\2cS\\3\\2\\2\\2cT\\3\\2\\2\\2cU\\3\\2\\2\\2cV\\3\\2\\2\\2cZ\\3\\2\\2\\2c[\\3\\2\\2\\2ca\\3\\2\\2\"+\n\t\t\"\\2cb\\3\\2\\2\\2d\\u0083\\3\\2\\2\\2ef\\f\\31\\2\\2fg\\7\\3\\2\\2gh\\5\\6\\4\\2hi\\7\\24\\2\\2\"+\n\t\t\"ij\\5\\6\\4\\32j\\u0082\\3\\2\\2\\2kl\\f\\30\\2\\2lm\\t\\2\\2\\2m\\u0082\\5\\6\\4\\31no\\f\\27\"+\n\t\t\"\\2\\2op\\t\\3\\2\\2p\\u0082\\5\\6\\4\\30qr\\f\\26\\2\\2rs\\t\\4\\2\\2s\\u0082\\5\\6\\4\\27tu\"+\n\t\t\"\\f\\25\\2\\2uv\\t\\5\\2\\2v\\u0082\\5\\6\\4\\26wx\\f\\22\\2\\2xy\\7\\35\\2\\2y\\u0082\\7*\\2\"+\n\t\t\"\\2z{\\f\\21\\2\\2{|\\7\\35\\2\\2|}\\7\\67\\2\\2}~\\7\\26\\2\\2~\\177\\5\\4\\3\\2\\177\\u0080\"+\n\t\t\"\\7\\27\\2\\2\\u0080\\u0082\\3\\2\\2\\2\\u0081e\\3\\2\\2\\2\\u0081k\\3\\2\\2\\2\\u0081n\\3\\2\"+\n\t\t\"\\2\\2\\u0081q\\3\\2\\2\\2\\u0081t\\3\\2\\2\\2\\u0081w\\3\\2\\2\\2\\u0081z\\3\\2\\2\\2\\u0082\"+\n\t\t\"\\u0085\\3\\2\\2\\2\\u0083\\u0081\\3\\2\\2\\2\\u0083\\u0084\\3\\2\\2\\2\\u0084\\7\\3\\2\\2\\2\"+\n\t\t\"\\u0085\\u0083\\3\\2\\2\\2\\u0086\\u0087\\7\\5\\2\\2\\u0087\\u0088\\7\\67\\2\\2\\u0088\\u0090\"+\n\t\t\"\\7\\5\\2\\2\\u0089\\u008a\\7\\5\\2\\2\\u008a\\u008b\\78\\2\\2\\u008b\\u0090\\7\\5\\2\\2\\u008c\"+\n\t\t\"\\u008d\\7\\5\\2\\2\\u008d\\u008e\\7\\66\\2\\2\\u008e\\u0090\\7\\5\\2\\2\\u008f\\u0086\\3\"+\n\t\t\"\\2\\2\\2\\u008f\\u0089\\3\\2\\2\\2\\u008f\\u008c\\3\\2\\2\\2\\u0090\\t\\3\\2\\2\\2\\u0091\\u0095\"+\n\t\t\"\\5\\24\\13\\2\\u0092\\u0095\\58\\35\\2\\u0093\\u0095\\5\\34\\17\\2\\u0094\\u0091\\3\\2\\2\"+\n\t\t\"\\2\\u0094\\u0092\\3\\2\\2\\2\\u0094\\u0093\\3\\2\\2\\2\\u0095\\13\\3\\2\\2\\2\\u0096\\u009b\"+\n\t\t\"\\5\\n\\6\\2\\u0097\\u0098\\5\\n\\6\\2\\u0098\\u0099\\5\\f\\7\\2\\u0099\\u009b\\3\\2\\2\\2\\u009a\"+\n\t\t\"\\u0096\\3\\2\\2\\2\\u009a\\u0097\\3\\2\\2\\2\\u009b\\r\\3\\2\\2\\2\\u009c\\u009d\\7\\67\\2\"+\n\t\t\"\\2\\u009d\\u009e\\7\\24\\2\\2\\u009e\\u009f\\5\\26\\f\\2\\u009f\\17\\3\\2\\2\\2\\u00a0\\u00a6\"+\n\t\t\"\\5\\16\\b\\2\\u00a1\\u00a2\\5\\16\\b\\2\\u00a2\\u00a3\\7\\25\\2\\2\\u00a3\\u00a4\\5\\20\\t\"+\n\t\t\"\\2\\u00a4\\u00a6\\3\\2\\2\\2\\u00a5\\u00a0\\3\\2\\2\\2\\u00a5\\u00a1\\3\\2\\2\\2\\u00a6\\21\"+\n\t\t\"\\3\\2\\2\\2\\u00a7\\u00aa\\5\\20\\t\\2\\u00a8\\u00aa\\3\\2\\2\\2\\u00a9\\u00a7\\3\\2\\2\\2\"+\n\t\t\"\\u00a9\\u00a8\\3\\2\\2\\2\\u00aa\\23\\3\\2\\2\\2\\u00ab\\u00ac\\7\\62\\2\\2\\u00ac\\u00ad\"+\n\t\t\"\\7\\67\\2\\2\\u00ad\\u00ae\\7\\32\\2\\2\\u00ae\\u00af\\5\\22\\n\\2\\u00af\\u00b0\\7\\33\\2\"+\n\t\t\"\\2\\u00b0\\u00b6\\3\\2\\2\\2\\u00b1\\u00b2\\7\\62\\2\\2\\u00b2\\u00b3\\7\\67\\2\\2\\u00b3\"+\n\t\t\"\\u00b4\\7\\23\\2\\2\\u00b4\\u00b6\\5\\26\\f\\2\\u00b5\\u00ab\\3\\2\\2\\2\\u00b5\\u00b1\\3\"+\n\t\t\"\\2\\2\\2\\u00b6\\25\\3\\2\\2\\2\\u00b7\\u00b8\\b\\f\\1\\2\\u00b8\\u00b9\\7\\67\\2\\2\\u00b9\"+\n\t\t\"\\u00c5\\3\\2\\2\\2\\u00ba\\u00bb\\f\\5\\2\\2\\u00bb\\u00c4\\7)\\2\\2\\u00bc\\u00bd\\f\\4\"+\n\t\t\"\\2\\2\\u00bd\\u00be\\7\\30\\2\\2\\u00be\\u00c4\\7\\31\\2\\2\\u00bf\\u00c0\\f\\3\\2\\2\\u00c0\"+\n\t\t\"\\u00c1\\7\\30\\2\\2\\u00c1\\u00c2\\7\\66\\2\\2\\u00c2\\u00c4\\7\\31\\2\\2\\u00c3\\u00ba\"+\n\t\t\"\\3\\2\\2\\2\\u00c3\\u00bc\\3\\2\\2\\2\\u00c3\\u00bf\\3\\2\\2\\2\\u00c4\\u00c7\\3\\2\\2\\2\\u00c5\"+\n\t\t\"\\u00c3\\3\\2\\2\\2\\u00c5\\u00c6\\3\\2\\2\\2\\u00c6\\27\\3\\2\\2\\2\\u00c7\\u00c5\\3\\2\\2\"+\n\t\t\"\\2\\u00c8\\u00c9\\5\\26\\f\\2\\u00c9\\u00cd\\7\\67\\2\\2\\u00ca\\u00cc\\5\\32\\16\\2\\u00cb\"+\n\t\t\"\\u00ca\\3\\2\\2\\2\\u00cc\\u00cf\\3\\2\\2\\2\\u00cd\\u00cb\\3\\2\\2\\2\\u00cd\\u00ce\\3\\2\"+\n\t\t\"\\2\\2\\u00ce\\u00d2\\3\\2\\2\\2\\u00cf\\u00cd\\3\\2\\2\\2\\u00d0\\u00d2\\3\\2\\2\\2\\u00d1\"+\n\t\t\"\\u00c8\\3\\2\\2\\2\\u00d1\\u00d0\\3\\2\\2\\2\\u00d2\\31\\3\\2\\2\\2\\u00d3\\u00d4\\7\\25\\2\"+\n\t\t\"\\2\\u00d4\\u00d5\\5\\26\\f\\2\\u00d5\\u00d6\\7\\67\\2\\2\\u00d6\\33\\3\\2\\2\\2\\u00d7\\u00d8\"+\n\t\t\"\\7\\64\\2\\2\\u00d8\\u00d9\\7\\67\\2\\2\\u00d9\\u00da\\7\\23\\2\\2\\u00da\\u00e6\\5\\6\\4\"+\n\t\t\"\\2\\u00db\\u00dc\\7\\64\\2\\2\\u00dc\\u00dd\\7\\67\\2\\2\\u00dd\\u00de\\7\\24\\2\\2\\u00de\"+\n\t\t\"\\u00df\\7\\67\\2\\2\\u00df\\u00e0\\7\\23\\2\\2\\u00e0\\u00e6\\5\\6\\4\\2\\u00e1\\u00e2\\7\"+\n\t\t\"\\64\\2\\2\\u00e2\\u00e3\\7\\67\\2\\2\\u00e3\\u00e4\\7\\24\\2\\2\\u00e4\\u00e6\\7\\67\\2\\2\"+\n\t\t\"\\u00e5\\u00d7\\3\\2\\2\\2\\u00e5\\u00db\\3\\2\\2\\2\\u00e5\\u00e1\\3\\2\\2\\2\\u00e6\\35\"+\n\t\t\"\\3\\2\\2\\2\\u00e7\\u00ed\\5\\6\\4\\2\\u00e8\\u00e9\\5\\6\\4\\2\\u00e9\\u00ea\\7\\25\\2\\2\"+\n\t\t\"\\u00ea\\u00eb\\5\\36\\20\\2\\u00eb\\u00ed\\3\\2\\2\\2\\u00ec\\u00e7\\3\\2\\2\\2\\u00ec\\u00e8\"+\n\t\t\"\\3\\2\\2\\2\\u00ed\\37\\3\\2\\2\\2\\u00ee\\u00ef\\7\\67\\2\\2\\u00ef\\u00f0\\7\\26\\2\\2\\u00f0\"+\n\t\t\"\\u00f7\\7\\27\\2\\2\\u00f1\\u00f2\\7\\67\\2\\2\\u00f2\\u00f3\\7\\26\\2\\2\\u00f3\\u00f4\"+\n\t\t\"\\5\\36\\20\\2\\u00f4\\u00f5\\7\\27\\2\\2\\u00f5\\u00f7\\3\\2\\2\\2\\u00f6\\u00ee\\3\\2\\2\"+\n\t\t\"\\2\\u00f6\\u00f1\\3\\2\\2\\2\\u00f7!\\3\\2\\2\\2\\u00f8\\u00f9\\b\\22\\1\\2\\u00f9\\u00fa\"+\n\t\t\"\\7\\67\\2\\2\\u00fa\\u00fb\\7\\35\\2\\2\\u00fb\\u0102\\7\\67\\2\\2\\u00fc\\u00fd\\7\\67\\2\"+\n\t\t\"\\2\\u00fd\\u00fe\\7\\30\\2\\2\\u00fe\\u00ff\\5\\6\\4\\2\\u00ff\\u0100\\7\\31\\2\\2\\u0100\"+\n\t\t\"\\u0102\\3\\2\\2\\2\\u0101\\u00f8\\3\\2\\2\\2\\u0101\\u00fc\\3\\2\\2\\2\\u0102\\u010d\\3\\2\"+\n\t\t\"\\2\\2\\u0103\\u0104\\f\\4\\2\\2\\u0104\\u0105\\7\\35\\2\\2\\u0105\\u010c\\7\\67\\2\\2\\u0106\"+\n\t\t\"\\u0107\\f\\3\\2\\2\\u0107\\u0108\\7\\30\\2\\2\\u0108\\u0109\\5\\6\\4\\2\\u0109\\u010a\\7\"+\n\t\t\"\\31\\2\\2\\u010a\\u010c\\3\\2\\2\\2\\u010b\\u0103\\3\\2\\2\\2\\u010b\\u0106\\3\\2\\2\\2\\u010c\"+\n\t\t\"\\u010f\\3\\2\\2\\2\\u010d\\u010b\\3\\2\\2\\2\\u010d\\u010e\\3\\2\\2\\2\\u010e#\\3\\2\\2\\2\"+\n\t\t\"\\u010f\\u010d\\3\\2\\2\\2\\u0110\\u0115\\5\\6\\4\\2\\u0111\\u0112\\7\\25\\2\\2\\u0112\\u0114\"+\n\t\t\"\\5\\6\\4\\2\\u0113\\u0111\\3\\2\\2\\2\\u0114\\u0117\\3\\2\\2\\2\\u0115\\u0113\\3\\2\\2\\2\\u0115\"+\n\t\t\"\\u0116\\3\\2\\2\\2\\u0116%\\3\\2\\2\\2\\u0117\\u0115\\3\\2\\2\\2\\u0118\\u0119\\7\\67\\2\\2\"+\n\t\t\"\\u0119\\u011a\\7\\23\\2\\2\\u011a\\u012c\\5\\6\\4\\2\\u011b\\u011c\\5\\\"\\22\\2\\u011c\\u011d\"+\n\t\t\"\\7\\23\\2\\2\\u011d\\u011e\\5\\6\\4\\2\\u011e\\u012c\\3\\2\\2\\2\\u011f\\u0120\\5\\\"\\22\\2\"+\n\t\t\"\\u0120\\u0121\\7\\23\\2\\2\\u0121\\u0122\\7\\32\\2\\2\\u0122\\u0123\\5$\\23\\2\\u0123\\u0124\"+\n\t\t\"\\7\\33\\2\\2\\u0124\\u012c\\3\\2\\2\\2\\u0125\\u0126\\7\\67\\2\\2\\u0126\\u0127\\7\\23\\2\"+\n\t\t\"\\2\\u0127\\u0128\\7\\32\\2\\2\\u0128\\u0129\\5$\\23\\2\\u0129\\u012a\\7\\33\\2\\2\\u012a\"+\n\t\t\"\\u012c\\3\\2\\2\\2\\u012b\\u0118\\3\\2\\2\\2\\u012b\\u011b\\3\\2\\2\\2\\u012b\\u011f\\3\\2\"+\n\t\t\"\\2\\2\\u012b\\u0125\\3\\2\\2\\2\\u012c\\'\\3\\2\\2\\2\\u012d\\u012e\\7\\\"\\2\\2\\u012e\\u012f\"+\n\t\t\"\\7\\26\\2\\2\\u012f\\u0130\\5\\6\\4\\2\\u0130\\u0131\\7\\27\\2\\2\\u0131\\u0132\\7#\\2\\2\"+\n\t\t\"\\u0132\\u0133\\5\\66\\34\\2\\u0133\\u0134\\7$\\2\\2\\u0134\\u0135\\5\\66\\34\\2\\u0135\"+\n\t\t\"\\u013e\\3\\2\\2\\2\\u0136\\u0137\\7\\\"\\2\\2\\u0137\\u0138\\7\\26\\2\\2\\u0138\\u0139\\5\"+\n\t\t\"\\6\\4\\2\\u0139\\u013a\\7\\27\\2\\2\\u013a\\u013b\\7#\\2\\2\\u013b\\u013c\\5\\66\\34\\2\\u013c\"+\n\t\t\"\\u013e\\3\\2\\2\\2\\u013d\\u012d\\3\\2\\2\\2\\u013d\\u0136\\3\\2\\2\\2\\u013e)\\3\\2\\2\\2\"+\n\t\t\"\\u013f\\u0140\\7%\\2\\2\\u0140\\u0141\\7\\26\\2\\2\\u0141\\u0142\\5\\6\\4\\2\\u0142\\u0143\"+\n\t\t\"\\7\\27\\2\\2\\u0143\\u0144\\7.\\2\\2\\u0144\\u0145\\5\\66\\34\\2\\u0145+\\3\\2\\2\\2\\u0146\"+\n\t\t\"\\u0147\\7/\\2\\2\\u0147\\u0148\\7\\26\\2\\2\\u0148\\u0149\\7\\67\\2\\2\\u0149\\u014a\\7\"+\n\t\t\"\\24\\2\\2\\u014a\\u014b\\5\\6\\4\\2\\u014b\\u014c\\7\\27\\2\\2\\u014c\\u014d\\5\\66\\34\\2\"+\n\t\t\"\\u014d-\\3\\2\\2\\2\\u014e\\u014f\\7-\\2\\2\\u014f\\u0150\\7\\26\\2\\2\\u0150\\u0151\\5\"+\n\t\t\"\\6\\4\\2\\u0151\\u0152\\7\\27\\2\\2\\u0152\\u0153\\7\\34\\2\\2\\u0153/\\3\\2\\2\\2\\u0154\"+\n\t\t\"\\u0155\\7&\\2\\2\\u0155\\u0156\\5\\6\\4\\2\\u0156\\u0157\\7\\34\\2\\2\\u0157\\61\\3\\2\\2\"+\n\t\t\"\\2\\u0158\\u0159\\5\\6\\4\\2\\u0159\\u015a\\7\\34\\2\\2\\u015a\\63\\3\\2\\2\\2\\u015b\\u015c\"+\n\t\t\"\\5\\34\\17\\2\\u015c\\u015d\\7\\34\\2\\2\\u015d\\65\\3\\2\\2\\2\\u015e\\u0162\\7\\32\\2\\2\"+\n\t\t\"\\u015f\\u0161\\5\\66\\34\\2\\u0160\\u015f\\3\\2\\2\\2\\u0161\\u0164\\3\\2\\2\\2\\u0162\\u0160\"+\n\t\t\"\\3\\2\\2\\2\\u0162\\u0163\\3\\2\\2\\2\\u0163\\u0165\\3\\2\\2\\2\\u0164\\u0162\\3\\2\\2\\2\\u0165\"+\n\t\t\"\\u0170\\7\\33\\2\\2\\u0166\\u0170\\5(\\25\\2\\u0167\\u0170\\5*\\26\\2\\u0168\\u0170\\5\"+\n\t\t\",\\27\\2\\u0169\\u0170\\5.\\30\\2\\u016a\\u0170\\5\\60\\31\\2\\u016b\\u0170\\5\\64\\33\\2\"+\n\t\t\"\\u016c\\u016d\\7\\'\\2\\2\\u016d\\u0170\\7\\34\\2\\2\\u016e\\u0170\\5\\62\\32\\2\\u016f\"+\n\t\t\"\\u015e\\3\\2\\2\\2\\u016f\\u0166\\3\\2\\2\\2\\u016f\\u0167\\3\\2\\2\\2\\u016f\\u0168\\3\\2\"+\n\t\t\"\\2\\2\\u016f\\u0169\\3\\2\\2\\2\\u016f\\u016a\\3\\2\\2\\2\\u016f\\u016b\\3\\2\\2\\2\\u016f\"+\n\t\t\"\\u016c\\3\\2\\2\\2\\u016f\\u016e\\3\\2\\2\\2\\u0170\\67\\3\\2\\2\\2\\u0171\\u0172\\7\\63\\2\"+\n\t\t\"\\2\\u0172\\u0173\\5\\26\\f\\2\\u0173\\u0174\\7\\67\\2\\2\\u0174\\u0175\\7\\26\\2\\2\\u0175\"+\n\t\t\"\\u0176\\5\\30\\r\\2\\u0176\\u0177\\7\\27\\2\\2\\u0177\\u017b\\7\\32\\2\\2\\u0178\\u017a\"+\n\t\t\"\\5\\64\\33\\2\\u0179\\u0178\\3\\2\\2\\2\\u017a\\u017d\\3\\2\\2\\2\\u017b\\u0179\\3\\2\\2\\2\"+\n\t\t\"\\u017b\\u017c\\3\\2\\2\\2\\u017c\\u0181\\3\\2\\2\\2\\u017d\\u017b\\3\\2\\2\\2\\u017e\\u0180\"+\n\t\t\"\\5\\66\\34\\2\\u017f\\u017e\\3\\2\\2\\2\\u0180\\u0183\\3\\2\\2\\2\\u0181\\u017f\\3\\2\\2\\2\"+\n\t\t\"\\u0181\\u0182\\3\\2\\2\\2\\u0182\\u0184\\3\\2\\2\\2\\u0183\\u0181\\3\\2\\2\\2\\u0184\\u0185\"+\n\t\t\"\\5\\60\\31\\2\\u0185\\u0186\\7\\33\\2\\2\\u01869\\3\\2\\2\\2\\35Ac\\u0081\\u0083\\u008f\"+\n\t\t\"\\u0094\\u009a\\u00a5\\u00a9\\u00b5\\u00c3\\u00c5\\u00cd\\u00d1\\u00e5\\u00ec\\u00f6\"+\n\t\t\"\\u0101\\u010b\\u010d\\u0115\\u012b\\u013d\\u0162\\u016f\\u017b\\u0181\";\n\tpublic static final ATN _ATN =\n\t\tnew ATNDeserializer().deserialize(_serializedATN.toCharArray());\n\tstatic {\n\t\t_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];\n\t\tfor (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {\n\t\t\t_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);\n\t\t}\n\t}\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/generated/java/edu/duke/summer/client/algorithm/inputParser.java b/client/src/generated/java/edu/duke/summer/client/algorithm/inputParser.java
--- a/client/src/generated/java/edu/duke/summer/client/algorithm/inputParser.java	(revision aa0107d1ac2044f0f7ed49d1b2ffe277854ee062)
+++ b/client/src/generated/java/edu/duke/summer/client/algorithm/inputParser.java	(date 1658448468850)
@@ -1,4 +1,4 @@
-// Generated from edu\duke\summer\client\algorithm\input.g4 by ANTLR 4.5
+// Generated from edu/duke/summer/client/algorithm/input.g4 by ANTLR 4.5
 package edu.duke.summer.client.algorithm;
 import org.antlr.v4.runtime.atn.*;
 import org.antlr.v4.runtime.dfa.DFA;
Index: client/src/main/resources/templates/object.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Object Create</title>\n    <script src=\"/webjars/jquery/jquery.min.js\"></script>\n    <script src=\"/webjars/sockjs-client/sockjs.min.js\"></script>\n    <script src=\"/webjars/stomp-websocket/stomp.min.js\"></script>\n</head>\n<body>\n<h1> Select Objects </h1>\n<form action=\"#\" th:action=\"@{/createobject}\" method=\"post\">\n    <select class=\"form-control\" id=\"objectName\" name=\"objectName\">\n        <option disabled> - select objects -\n        </option>\n        <option th:each=\"objectName : ${objects}\" th:value=\"${objectName}\" th:text=\"${objectName}\">\n        </option>\n    </select>\n    <p><input type=\"submit\" value=\"Submit\"/></p>\n</form>\n<p id=\"showTheTextMessage\"></p>\n<button onClick=\"createForm()\">generateForm</button>\n<!--<button onclick=\"connectObjectCreateSocket()\">connect</button>-->\n<!--<button onclick=\"disconnect()\">disconnect</button>-->\n<button onclick=\"sendObjectName()\">sendObjectName</button>\n</body>\n<script>\n    $(document).ready(function(){\n        connectObjectCreateSocket();\n    })\n    function createFormInput(form, entryName, id) {\n        var label = document.createElement(\"label\");\n        label.innerHTML = entryName+\": \";\n        var br = document.createElement(\"br\");\n        var i = document.createElement(\"input\");\n        i.type = \"text\";\n        i.name = entryName;\n        i.id = id;\n        form.appendChild(label);\n        form.appendChild(i);\n        form.appendChild(br);\n    }\n    function createFormCheckBox(form, entryName, id) {\n        var label = document.createElement(\"label\");\n        label.innerHTML = entryName+\": \";\n        var br = document.createElement(\"br\");\n        var c = document.createElement(\"input\");\n        c.type = \"checkbox\";\n        c.id = id;\n        c.name = entryName;\n        form.appendChild(label);\n        form.appendChild(c);\n        form.appendChild(br);\n    }\n\n    function createFormButton(form, buttonName) {\n        var br = document.createElement(\"br\");\n        var s = document.createElement(\"input\");\n        s.type = \"submit\";\n        s.value = buttonName;\n        form.appendChild(s);\n        form.appendChild(br);\n    }\n\n    function createFormDropDown(form,entryName,arrayList,id){\n        var label = document.createElement(\"label\");\n        label.innerHTML = entryName+\": \";\n        var br = document.createElement(\"br\");\n        var select = document.createElement(\"select\");\n        select.name=\"objectList\";\n        select.id=id;\n        for(const val of arrayList){\n            var option = document.createElement(\"option\");\n            option.value=val;\n            option.text =val;\n            select.appendChild(option);\n        }\n        form.appendChild(label);\n        form.appendChild(select);\n        form.appendChild(br);\n    }\n    function createForm() {\n        //create a form\n        var f = document.createElement(\"form\");\n        f.setAttribute('method',\"post\");\n        f.setAttribute('action',\"submit.php\");\n        createFormInput(f,\"asdf\",\"1234\");\n        createFormInput(f,\"asdf\",\"1234\");\n        createFormInput(f,\"asdf\",\"1234\");\n        createFormCheckBox(f,\"asdf\",\"asdf\");\n        createFormButton(f,\"asdf\");\n        var values = [\"dog\",\"cat\",\"parrpt\"];\n        createFormDropDown(f, \"asdf\",values);\n        document.getElementsByTagName('body')[0].appendChild(f); //pure javascript\n    }\n    var stompClient = null;\n    function connectObjectCreateSocket(){\n        var socket = new SockJS('/gs-guide-websocket');\n        stompClient = Stomp.over(socket);\n        stompClient.connect({},function (frame){\n            console.log('Connected: '+ frame);\n            stompClient.subscribe('/objectcreate/field',function (RespObjectCreatingField){\n                    var objectField = JSON.parse(RespObjectCreatingField.body).objectField;\n                for(var i = 0; i < objectField.length;i++){\n                    document.writeln(objectField[i]);}\n                });\n            });\n    }\n    function disconnect() {\n        if (stompClient !== null) {\n            stompClient.disconnect();\n        }\n        console.log(\"Disconnected\");\n    }\n    function sendObjectName(){\n        stompClient.send(\"/app/createobject_name\",{},JSON.stringify({\n            'objectName':\"asdf\"\n        }));\n    }\n</script>\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/resources/templates/object.html b/client/src/main/resources/templates/object.html
--- a/client/src/main/resources/templates/object.html	(revision aa0107d1ac2044f0f7ed49d1b2ffe277854ee062)
+++ b/client/src/main/resources/templates/object.html	(date 1658448264756)
@@ -6,10 +6,12 @@
     <script src="/webjars/jquery/jquery.min.js"></script>
     <script src="/webjars/sockjs-client/sockjs.min.js"></script>
     <script src="/webjars/stomp-websocket/stomp.min.js"></script>
+    <script src="/createObject.js"></script>
 </head>
 <body>
 <h1> Select Objects </h1>
-<form action="#" th:action="@{/createobject}" method="post">
+<!--<form action="#" th:action="@{/createobject}" method="post">-->
+<form action="#" method="post">
     <select class="form-control" id="objectName" name="objectName">
         <option disabled> - select objects -
         </option>
@@ -20,102 +22,6 @@
 </form>
 <p id="showTheTextMessage"></p>
 <button onClick="createForm()">generateForm</button>
-<!--<button onclick="connectObjectCreateSocket()">connect</button>-->
-<!--<button onclick="disconnect()">disconnect</button>-->
 <button onclick="sendObjectName()">sendObjectName</button>
 </body>
-<script>
-    $(document).ready(function(){
-        connectObjectCreateSocket();
-    })
-    function createFormInput(form, entryName, id) {
-        var label = document.createElement("label");
-        label.innerHTML = entryName+": ";
-        var br = document.createElement("br");
-        var i = document.createElement("input");
-        i.type = "text";
-        i.name = entryName;
-        i.id = id;
-        form.appendChild(label);
-        form.appendChild(i);
-        form.appendChild(br);
-    }
-    function createFormCheckBox(form, entryName, id) {
-        var label = document.createElement("label");
-        label.innerHTML = entryName+": ";
-        var br = document.createElement("br");
-        var c = document.createElement("input");
-        c.type = "checkbox";
-        c.id = id;
-        c.name = entryName;
-        form.appendChild(label);
-        form.appendChild(c);
-        form.appendChild(br);
-    }
-
-    function createFormButton(form, buttonName) {
-        var br = document.createElement("br");
-        var s = document.createElement("input");
-        s.type = "submit";
-        s.value = buttonName;
-        form.appendChild(s);
-        form.appendChild(br);
-    }
-
-    function createFormDropDown(form,entryName,arrayList,id){
-        var label = document.createElement("label");
-        label.innerHTML = entryName+": ";
-        var br = document.createElement("br");
-        var select = document.createElement("select");
-        select.name="objectList";
-        select.id=id;
-        for(const val of arrayList){
-            var option = document.createElement("option");
-            option.value=val;
-            option.text =val;
-            select.appendChild(option);
-        }
-        form.appendChild(label);
-        form.appendChild(select);
-        form.appendChild(br);
-    }
-    function createForm() {
-        //create a form
-        var f = document.createElement("form");
-        f.setAttribute('method',"post");
-        f.setAttribute('action',"submit.php");
-        createFormInput(f,"asdf","1234");
-        createFormInput(f,"asdf","1234");
-        createFormInput(f,"asdf","1234");
-        createFormCheckBox(f,"asdf","asdf");
-        createFormButton(f,"asdf");
-        var values = ["dog","cat","parrpt"];
-        createFormDropDown(f, "asdf",values);
-        document.getElementsByTagName('body')[0].appendChild(f); //pure javascript
-    }
-    var stompClient = null;
-    function connectObjectCreateSocket(){
-        var socket = new SockJS('/gs-guide-websocket');
-        stompClient = Stomp.over(socket);
-        stompClient.connect({},function (frame){
-            console.log('Connected: '+ frame);
-            stompClient.subscribe('/objectcreate/field',function (RespObjectCreatingField){
-                    var objectField = JSON.parse(RespObjectCreatingField.body).objectField;
-                for(var i = 0; i < objectField.length;i++){
-                    document.writeln(objectField[i]);}
-                });
-            });
-    }
-    function disconnect() {
-        if (stompClient !== null) {
-            stompClient.disconnect();
-        }
-        console.log("Disconnected");
-    }
-    function sendObjectName(){
-        stompClient.send("/app/createobject_name",{},JSON.stringify({
-            'objectName':"asdf"
-        }));
-    }
-</script>
 </html>
\ No newline at end of file
Index: client/src/generated/java/edu/duke/summer/client/algorithm/inputLexer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Generated from edu\\duke\\summer\\client\\algorithm\\input.g4 by ANTLR 4.5\npackage edu.duke.summer.client.algorithm;\nimport org.antlr.v4.runtime.Lexer;\nimport org.antlr.v4.runtime.CharStream;\nimport org.antlr.v4.runtime.Token;\nimport org.antlr.v4.runtime.TokenStream;\nimport org.antlr.v4.runtime.*;\nimport org.antlr.v4.runtime.atn.*;\nimport org.antlr.v4.runtime.dfa.DFA;\nimport org.antlr.v4.runtime.misc.*;\n\n@SuppressWarnings({\"all\", \"warnings\", \"unchecked\", \"unused\", \"cast\"})\npublic class inputLexer extends Lexer {\n\tstatic { RuntimeMetaData.checkVersion(\"4.5\", RuntimeMetaData.VERSION); }\n\n\tprotected static final DFA[] _decisionToDFA;\n\tprotected static final PredictionContextCache _sharedContextCache =\n\t\tnew PredictionContextCache();\n\tpublic static final int\n\t\tT__0=1, T__1=2, QUO=3, EQ=4, NE=5, PLUS=6, MINUS=7, MUL=8, DIV=9, LT=10, \n\t\tLE=11, GT=12, GE=13, MOD=14, AND=15, OR=16, ASSIGN=17, COLON=18, COMMA=19, \n\t\tLPAREN=20, RPAREN=21, LBRACK=22, RBRACK=23, LBRACE=24, RBRACE=25, SEMICOLON=26, \n\t\tDOT=27, NEW=28, ROLL=29, SINGLEROLL=30, ROLLKEY=31, IF=32, THEN=33, ELSE=34, \n\t\tWHILE=35, RETURN=36, BREAK=37, ARRAY=38, OPTION=39, LENGTH=40, TRUE=41, \n\t\tFALSE=42, PRINT=43, DO=44, FOR=45, OF=46, TO=47, DEFTYPEKEY=48, DEFFUNKEY=49, \n\t\tDEFVARKEY=50, DEFSTRUCTKEY=51, INT=52, ID=53, STRING=54, WS=55;\n\tpublic static String[] modeNames = {\n\t\t\"DEFAULT_MODE\"\n\t};\n\n\tpublic static final String[] ruleNames = {\n\t\t\"T__0\", \"T__1\", \"QUO\", \"EQ\", \"NE\", \"PLUS\", \"MINUS\", \"MUL\", \"DIV\", \"LT\", \n\t\t\"LE\", \"GT\", \"GE\", \"MOD\", \"AND\", \"OR\", \"ASSIGN\", \"COLON\", \"COMMA\", \"LPAREN\", \n\t\t\"RPAREN\", \"LBRACK\", \"RBRACK\", \"LBRACE\", \"RBRACE\", \"SEMICOLON\", \"DOT\", \n\t\t\"NEW\", \"ROLL\", \"SINGLEROLL\", \"ROLLKEY\", \"IF\", \"THEN\", \"ELSE\", \"WHILE\", \n\t\t\"RETURN\", \"BREAK\", \"ARRAY\", \"OPTION\", \"LENGTH\", \"TRUE\", \"FALSE\", \"PRINT\", \n\t\t\"DO\", \"FOR\", \"OF\", \"TO\", \"DEFTYPEKEY\", \"DEFFUNKEY\", \"DEFVARKEY\", \"DEFSTRUCTKEY\", \n\t\t\"INT\", \"ID\", \"STRING\", \"WS\"\n\t};\n\n\tprivate static final String[] _LITERAL_NAMES = {\n\t\tnull, \"'?'\", \"'!'\", \"'\\\"'\", \"'=='\", \"'!='\", \"'+'\", \"'-'\", \"'*'\", \"'/'\", \n\t\t\"'<'\", \"'<='\", \"'>'\", \"'>='\", \"'%'\", \"'&&'\", \"'||'\", \"'='\", \"':'\", \"','\", \n\t\t\"'('\", \"')'\", \"'['\", \"']'\", \"'{'\", \"'}'\", \"';'\", \"'.'\", \"'new'\", null, \n\t\tnull, null, \"'if'\", \"'then'\", \"'else'\", \"'while'\", \"'return'\", \"'break'\", \n\t\t\"'array'\", \"'option'\", \"'length'\", \"'true'\", \"'false'\", \"'print'\", \"'do'\", \n\t\t\"'for'\", \"'of'\", \"'to'\", \"'type'\", \"'fun'\", \"'var'\", \"'struct'\"\n\t};\n\tprivate static final String[] _SYMBOLIC_NAMES = {\n\t\tnull, null, null, \"QUO\", \"EQ\", \"NE\", \"PLUS\", \"MINUS\", \"MUL\", \"DIV\", \"LT\", \n\t\t\"LE\", \"GT\", \"GE\", \"MOD\", \"AND\", \"OR\", \"ASSIGN\", \"COLON\", \"COMMA\", \"LPAREN\", \n\t\t\"RPAREN\", \"LBRACK\", \"RBRACK\", \"LBRACE\", \"RBRACE\", \"SEMICOLON\", \"DOT\", \n\t\t\"NEW\", \"ROLL\", \"SINGLEROLL\", \"ROLLKEY\", \"IF\", \"THEN\", \"ELSE\", \"WHILE\", \n\t\t\"RETURN\", \"BREAK\", \"ARRAY\", \"OPTION\", \"LENGTH\", \"TRUE\", \"FALSE\", \"PRINT\", \n\t\t\"DO\", \"FOR\", \"OF\", \"TO\", \"DEFTYPEKEY\", \"DEFFUNKEY\", \"DEFVARKEY\", \"DEFSTRUCTKEY\", \n\t\t\"INT\", \"ID\", \"STRING\", \"WS\"\n\t};\n\tpublic static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);\n\n\t/**\n\t * @deprecated Use {@link #VOCABULARY} instead.\n\t */\n\t@Deprecated\n\tpublic static final String[] tokenNames;\n\tstatic {\n\t\ttokenNames = new String[_SYMBOLIC_NAMES.length];\n\t\tfor (int i = 0; i < tokenNames.length; i++) {\n\t\t\ttokenNames[i] = VOCABULARY.getLiteralName(i);\n\t\t\tif (tokenNames[i] == null) {\n\t\t\t\ttokenNames[i] = VOCABULARY.getSymbolicName(i);\n\t\t\t}\n\n\t\t\tif (tokenNames[i] == null) {\n\t\t\t\ttokenNames[i] = \"<INVALID>\";\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic String[] getTokenNames() {\n\t\treturn tokenNames;\n\t}\n\n\t@Override\n\n\tpublic Vocabulary getVocabulary() {\n\t\treturn VOCABULARY;\n\t}\n\n\n\tpublic inputLexer(CharStream input) {\n\t\tsuper(input);\n\t\t_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);\n\t}\n\n\t@Override\n\tpublic String getGrammarFileName() { return \"input.g4\"; }\n\n\t@Override\n\tpublic String[] getRuleNames() { return ruleNames; }\n\n\t@Override\n\tpublic String getSerializedATN() { return _serializedATN; }\n\n\t@Override\n\tpublic String[] getModeNames() { return modeNames; }\n\n\t@Override\n\tpublic ATN getATN() { return _ATN; }\n\n\tpublic static final String _serializedATN =\n\t\t\"\\3\\u0430\\ud6d1\\u8206\\uad2d\\u4417\\uaef1\\u8d80\\uaadd\\29\\u0138\\b\\1\\4\\2\\t\"+\n\t\t\"\\2\\4\\3\\t\\3\\4\\4\\t\\4\\4\\5\\t\\5\\4\\6\\t\\6\\4\\7\\t\\7\\4\\b\\t\\b\\4\\t\\t\\t\\4\\n\\t\\n\\4\\13\"+\n\t\t\"\\t\\13\\4\\f\\t\\f\\4\\r\\t\\r\\4\\16\\t\\16\\4\\17\\t\\17\\4\\20\\t\\20\\4\\21\\t\\21\\4\\22\\t\\22\"+\n\t\t\"\\4\\23\\t\\23\\4\\24\\t\\24\\4\\25\\t\\25\\4\\26\\t\\26\\4\\27\\t\\27\\4\\30\\t\\30\\4\\31\\t\\31\"+\n\t\t\"\\4\\32\\t\\32\\4\\33\\t\\33\\4\\34\\t\\34\\4\\35\\t\\35\\4\\36\\t\\36\\4\\37\\t\\37\\4 \\t \\4!\"+\n\t\t\"\\t!\\4\\\"\\t\\\"\\4#\\t#\\4$\\t$\\4%\\t%\\4&\\t&\\4\\'\\t\\'\\4(\\t(\\4)\\t)\\4*\\t*\\4+\\t+\\4\"+\n\t\t\",\\t,\\4-\\t-\\4.\\t.\\4/\\t/\\4\\60\\t\\60\\4\\61\\t\\61\\4\\62\\t\\62\\4\\63\\t\\63\\4\\64\\t\"+\n\t\t\"\\64\\4\\65\\t\\65\\4\\66\\t\\66\\4\\67\\t\\67\\48\\t8\\3\\2\\3\\2\\3\\3\\3\\3\\3\\4\\3\\4\\3\\5\\3\"+\n\t\t\"\\5\\3\\5\\3\\6\\3\\6\\3\\6\\3\\7\\3\\7\\3\\b\\3\\b\\3\\t\\3\\t\\3\\n\\3\\n\\3\\13\\3\\13\\3\\f\\3\\f\\3\"+\n\t\t\"\\f\\3\\r\\3\\r\\3\\16\\3\\16\\3\\16\\3\\17\\3\\17\\3\\20\\3\\20\\3\\20\\3\\21\\3\\21\\3\\21\\3\\22\"+\n\t\t\"\\3\\22\\3\\23\\3\\23\\3\\24\\3\\24\\3\\25\\3\\25\\3\\26\\3\\26\\3\\27\\3\\27\\3\\30\\3\\30\\3\\31\"+\n\t\t\"\\3\\31\\3\\32\\3\\32\\3\\33\\3\\33\\3\\34\\3\\34\\3\\35\\3\\35\\3\\35\\3\\35\\3\\36\\3\\36\\3\\36\"+\n\t\t\"\\3\\36\\3\\37\\3\\37\\3\\37\\3 \\3 \\3!\\3!\\3!\\3\\\"\\3\\\"\\3\\\"\\3\\\"\\3\\\"\\3#\\3#\\3#\\3#\\3\"+\n\t\t\"#\\3$\\3$\\3$\\3$\\3$\\3$\\3%\\3%\\3%\\3%\\3%\\3%\\3%\\3&\\3&\\3&\\3&\\3&\\3&\\3\\'\\3\\'\\3\\'\"+\n\t\t\"\\3\\'\\3\\'\\3\\'\\3(\\3(\\3(\\3(\\3(\\3(\\3(\\3)\\3)\\3)\\3)\\3)\\3)\\3)\\3*\\3*\\3*\\3*\\3*\"+\n\t\t\"\\3+\\3+\\3+\\3+\\3+\\3+\\3,\\3,\\3,\\3,\\3,\\3,\\3-\\3-\\3-\\3.\\3.\\3.\\3.\\3/\\3/\\3/\\3\\60\"+\n\t\t\"\\3\\60\\3\\60\\3\\61\\3\\61\\3\\61\\3\\61\\3\\61\\3\\62\\3\\62\\3\\62\\3\\62\\3\\63\\3\\63\\3\\63\"+\n\t\t\"\\3\\63\\3\\64\\3\\64\\3\\64\\3\\64\\3\\64\\3\\64\\3\\64\\3\\65\\6\\65\\u0122\\n\\65\\r\\65\\16\"+\n\t\t\"\\65\\u0123\\3\\66\\3\\66\\7\\66\\u0128\\n\\66\\f\\66\\16\\66\\u012b\\13\\66\\3\\67\\6\\67\\u012e\"+\n\t\t\"\\n\\67\\r\\67\\16\\67\\u012f\\38\\68\\u0133\\n8\\r8\\168\\u0134\\38\\38\\2\\29\\3\\3\\5\\4\"+\n\t\t\"\\7\\5\\t\\6\\13\\7\\r\\b\\17\\t\\21\\n\\23\\13\\25\\f\\27\\r\\31\\16\\33\\17\\35\\20\\37\\21!\\22\"+\n\t\t\"#\\23%\\24\\'\\25)\\26+\\27-\\30/\\31\\61\\32\\63\\33\\65\\34\\67\\359\\36;\\37= ?!A\\\"C\"+\n\t\t\"#E$G%I&K\\'M(O)Q*S+U,W-Y.[/]\\60_\\61a\\62c\\63e\\64g\\65i\\66k\\67m8o9\\3\\2\\7\\5\"+\n\t\t\"\\2FFff~~\\3\\2\\62;\\4\\2C\\\\c|\\5\\2\\62;C\\\\c|\\5\\2\\13\\f\\17\\17\\\"\\\"\\u013b\\2\\3\\3\"+\n\t\t\"\\2\\2\\2\\2\\5\\3\\2\\2\\2\\2\\7\\3\\2\\2\\2\\2\\t\\3\\2\\2\\2\\2\\13\\3\\2\\2\\2\\2\\r\\3\\2\\2\\2\\2\"+\n\t\t\"\\17\\3\\2\\2\\2\\2\\21\\3\\2\\2\\2\\2\\23\\3\\2\\2\\2\\2\\25\\3\\2\\2\\2\\2\\27\\3\\2\\2\\2\\2\\31\\3\"+\n\t\t\"\\2\\2\\2\\2\\33\\3\\2\\2\\2\\2\\35\\3\\2\\2\\2\\2\\37\\3\\2\\2\\2\\2!\\3\\2\\2\\2\\2#\\3\\2\\2\\2\\2\"+\n\t\t\"%\\3\\2\\2\\2\\2\\'\\3\\2\\2\\2\\2)\\3\\2\\2\\2\\2+\\3\\2\\2\\2\\2-\\3\\2\\2\\2\\2/\\3\\2\\2\\2\\2\\61\"+\n\t\t\"\\3\\2\\2\\2\\2\\63\\3\\2\\2\\2\\2\\65\\3\\2\\2\\2\\2\\67\\3\\2\\2\\2\\29\\3\\2\\2\\2\\2;\\3\\2\\2\\2\"+\n\t\t\"\\2=\\3\\2\\2\\2\\2?\\3\\2\\2\\2\\2A\\3\\2\\2\\2\\2C\\3\\2\\2\\2\\2E\\3\\2\\2\\2\\2G\\3\\2\\2\\2\\2I\"+\n\t\t\"\\3\\2\\2\\2\\2K\\3\\2\\2\\2\\2M\\3\\2\\2\\2\\2O\\3\\2\\2\\2\\2Q\\3\\2\\2\\2\\2S\\3\\2\\2\\2\\2U\\3\\2\"+\n\t\t\"\\2\\2\\2W\\3\\2\\2\\2\\2Y\\3\\2\\2\\2\\2[\\3\\2\\2\\2\\2]\\3\\2\\2\\2\\2_\\3\\2\\2\\2\\2a\\3\\2\\2\\2\"+\n\t\t\"\\2c\\3\\2\\2\\2\\2e\\3\\2\\2\\2\\2g\\3\\2\\2\\2\\2i\\3\\2\\2\\2\\2k\\3\\2\\2\\2\\2m\\3\\2\\2\\2\\2o\"+\n\t\t\"\\3\\2\\2\\2\\3q\\3\\2\\2\\2\\5s\\3\\2\\2\\2\\7u\\3\\2\\2\\2\\tw\\3\\2\\2\\2\\13z\\3\\2\\2\\2\\r}\\3\"+\n\t\t\"\\2\\2\\2\\17\\177\\3\\2\\2\\2\\21\\u0081\\3\\2\\2\\2\\23\\u0083\\3\\2\\2\\2\\25\\u0085\\3\\2\\2\"+\n\t\t\"\\2\\27\\u0087\\3\\2\\2\\2\\31\\u008a\\3\\2\\2\\2\\33\\u008c\\3\\2\\2\\2\\35\\u008f\\3\\2\\2\\2\"+\n\t\t\"\\37\\u0091\\3\\2\\2\\2!\\u0094\\3\\2\\2\\2#\\u0097\\3\\2\\2\\2%\\u0099\\3\\2\\2\\2\\'\\u009b\"+\n\t\t\"\\3\\2\\2\\2)\\u009d\\3\\2\\2\\2+\\u009f\\3\\2\\2\\2-\\u00a1\\3\\2\\2\\2/\\u00a3\\3\\2\\2\\2\\61\"+\n\t\t\"\\u00a5\\3\\2\\2\\2\\63\\u00a7\\3\\2\\2\\2\\65\\u00a9\\3\\2\\2\\2\\67\\u00ab\\3\\2\\2\\29\\u00ad\"+\n\t\t\"\\3\\2\\2\\2;\\u00b1\\3\\2\\2\\2=\\u00b5\\3\\2\\2\\2?\\u00b8\\3\\2\\2\\2A\\u00ba\\3\\2\\2\\2C\"+\n\t\t\"\\u00bd\\3\\2\\2\\2E\\u00c2\\3\\2\\2\\2G\\u00c7\\3\\2\\2\\2I\\u00cd\\3\\2\\2\\2K\\u00d4\\3\\2\"+\n\t\t\"\\2\\2M\\u00da\\3\\2\\2\\2O\\u00e0\\3\\2\\2\\2Q\\u00e7\\3\\2\\2\\2S\\u00ee\\3\\2\\2\\2U\\u00f3\"+\n\t\t\"\\3\\2\\2\\2W\\u00f9\\3\\2\\2\\2Y\\u00ff\\3\\2\\2\\2[\\u0102\\3\\2\\2\\2]\\u0106\\3\\2\\2\\2_\"+\n\t\t\"\\u0109\\3\\2\\2\\2a\\u010c\\3\\2\\2\\2c\\u0111\\3\\2\\2\\2e\\u0115\\3\\2\\2\\2g\\u0119\\3\\2\"+\n\t\t\"\\2\\2i\\u0121\\3\\2\\2\\2k\\u0125\\3\\2\\2\\2m\\u012d\\3\\2\\2\\2o\\u0132\\3\\2\\2\\2qr\\7A\"+\n\t\t\"\\2\\2r\\4\\3\\2\\2\\2st\\7#\\2\\2t\\6\\3\\2\\2\\2uv\\7$\\2\\2v\\b\\3\\2\\2\\2wx\\7?\\2\\2xy\\7?\"+\n\t\t\"\\2\\2y\\n\\3\\2\\2\\2z{\\7#\\2\\2{|\\7?\\2\\2|\\f\\3\\2\\2\\2}~\\7-\\2\\2~\\16\\3\\2\\2\\2\\177\"+\n\t\t\"\\u0080\\7/\\2\\2\\u0080\\20\\3\\2\\2\\2\\u0081\\u0082\\7,\\2\\2\\u0082\\22\\3\\2\\2\\2\\u0083\"+\n\t\t\"\\u0084\\7\\61\\2\\2\\u0084\\24\\3\\2\\2\\2\\u0085\\u0086\\7>\\2\\2\\u0086\\26\\3\\2\\2\\2\\u0087\"+\n\t\t\"\\u0088\\7>\\2\\2\\u0088\\u0089\\7?\\2\\2\\u0089\\30\\3\\2\\2\\2\\u008a\\u008b\\7@\\2\\2\\u008b\"+\n\t\t\"\\32\\3\\2\\2\\2\\u008c\\u008d\\7@\\2\\2\\u008d\\u008e\\7?\\2\\2\\u008e\\34\\3\\2\\2\\2\\u008f\"+\n\t\t\"\\u0090\\7\\'\\2\\2\\u0090\\36\\3\\2\\2\\2\\u0091\\u0092\\7(\\2\\2\\u0092\\u0093\\7(\\2\\2\"+\n\t\t\"\\u0093 \\3\\2\\2\\2\\u0094\\u0095\\7~\\2\\2\\u0095\\u0096\\7~\\2\\2\\u0096\\\"\\3\\2\\2\\2\"+\n\t\t\"\\u0097\\u0098\\7?\\2\\2\\u0098$\\3\\2\\2\\2\\u0099\\u009a\\7<\\2\\2\\u009a&\\3\\2\\2\\2\\u009b\"+\n\t\t\"\\u009c\\7.\\2\\2\\u009c(\\3\\2\\2\\2\\u009d\\u009e\\7*\\2\\2\\u009e*\\3\\2\\2\\2\\u009f\\u00a0\"+\n\t\t\"\\7+\\2\\2\\u00a0,\\3\\2\\2\\2\\u00a1\\u00a2\\7]\\2\\2\\u00a2.\\3\\2\\2\\2\\u00a3\\u00a4\\7\"+\n\t\t\"_\\2\\2\\u00a4\\60\\3\\2\\2\\2\\u00a5\\u00a6\\7}\\2\\2\\u00a6\\62\\3\\2\\2\\2\\u00a7\\u00a8\"+\n\t\t\"\\7\\177\\2\\2\\u00a8\\64\\3\\2\\2\\2\\u00a9\\u00aa\\7=\\2\\2\\u00aa\\66\\3\\2\\2\\2\\u00ab\"+\n\t\t\"\\u00ac\\7\\60\\2\\2\\u00ac8\\3\\2\\2\\2\\u00ad\\u00ae\\7p\\2\\2\\u00ae\\u00af\\7g\\2\\2\\u00af\"+\n\t\t\"\\u00b0\\7y\\2\\2\\u00b0:\\3\\2\\2\\2\\u00b1\\u00b2\\5i\\65\\2\\u00b2\\u00b3\\5? \\2\\u00b3\"+\n\t\t\"\\u00b4\\5i\\65\\2\\u00b4<\\3\\2\\2\\2\\u00b5\\u00b6\\5? \\2\\u00b6\\u00b7\\5i\\65\\2\\u00b7\"+\n\t\t\">\\3\\2\\2\\2\\u00b8\\u00b9\\t\\2\\2\\2\\u00b9@\\3\\2\\2\\2\\u00ba\\u00bb\\7k\\2\\2\\u00bb\"+\n\t\t\"\\u00bc\\7h\\2\\2\\u00bcB\\3\\2\\2\\2\\u00bd\\u00be\\7v\\2\\2\\u00be\\u00bf\\7j\\2\\2\\u00bf\"+\n\t\t\"\\u00c0\\7g\\2\\2\\u00c0\\u00c1\\7p\\2\\2\\u00c1D\\3\\2\\2\\2\\u00c2\\u00c3\\7g\\2\\2\\u00c3\"+\n\t\t\"\\u00c4\\7n\\2\\2\\u00c4\\u00c5\\7u\\2\\2\\u00c5\\u00c6\\7g\\2\\2\\u00c6F\\3\\2\\2\\2\\u00c7\"+\n\t\t\"\\u00c8\\7y\\2\\2\\u00c8\\u00c9\\7j\\2\\2\\u00c9\\u00ca\\7k\\2\\2\\u00ca\\u00cb\\7n\\2\\2\"+\n\t\t\"\\u00cb\\u00cc\\7g\\2\\2\\u00ccH\\3\\2\\2\\2\\u00cd\\u00ce\\7t\\2\\2\\u00ce\\u00cf\\7g\\2\"+\n\t\t\"\\2\\u00cf\\u00d0\\7v\\2\\2\\u00d0\\u00d1\\7w\\2\\2\\u00d1\\u00d2\\7t\\2\\2\\u00d2\\u00d3\"+\n\t\t\"\\7p\\2\\2\\u00d3J\\3\\2\\2\\2\\u00d4\\u00d5\\7d\\2\\2\\u00d5\\u00d6\\7t\\2\\2\\u00d6\\u00d7\"+\n\t\t\"\\7g\\2\\2\\u00d7\\u00d8\\7c\\2\\2\\u00d8\\u00d9\\7m\\2\\2\\u00d9L\\3\\2\\2\\2\\u00da\\u00db\"+\n\t\t\"\\7c\\2\\2\\u00db\\u00dc\\7t\\2\\2\\u00dc\\u00dd\\7t\\2\\2\\u00dd\\u00de\\7c\\2\\2\\u00de\"+\n\t\t\"\\u00df\\7{\\2\\2\\u00dfN\\3\\2\\2\\2\\u00e0\\u00e1\\7q\\2\\2\\u00e1\\u00e2\\7r\\2\\2\\u00e2\"+\n\t\t\"\\u00e3\\7v\\2\\2\\u00e3\\u00e4\\7k\\2\\2\\u00e4\\u00e5\\7q\\2\\2\\u00e5\\u00e6\\7p\\2\\2\"+\n\t\t\"\\u00e6P\\3\\2\\2\\2\\u00e7\\u00e8\\7n\\2\\2\\u00e8\\u00e9\\7g\\2\\2\\u00e9\\u00ea\\7p\\2\"+\n\t\t\"\\2\\u00ea\\u00eb\\7i\\2\\2\\u00eb\\u00ec\\7v\\2\\2\\u00ec\\u00ed\\7j\\2\\2\\u00edR\\3\\2\"+\n\t\t\"\\2\\2\\u00ee\\u00ef\\7v\\2\\2\\u00ef\\u00f0\\7t\\2\\2\\u00f0\\u00f1\\7w\\2\\2\\u00f1\\u00f2\"+\n\t\t\"\\7g\\2\\2\\u00f2T\\3\\2\\2\\2\\u00f3\\u00f4\\7h\\2\\2\\u00f4\\u00f5\\7c\\2\\2\\u00f5\\u00f6\"+\n\t\t\"\\7n\\2\\2\\u00f6\\u00f7\\7u\\2\\2\\u00f7\\u00f8\\7g\\2\\2\\u00f8V\\3\\2\\2\\2\\u00f9\\u00fa\"+\n\t\t\"\\7r\\2\\2\\u00fa\\u00fb\\7t\\2\\2\\u00fb\\u00fc\\7k\\2\\2\\u00fc\\u00fd\\7p\\2\\2\\u00fd\"+\n\t\t\"\\u00fe\\7v\\2\\2\\u00feX\\3\\2\\2\\2\\u00ff\\u0100\\7f\\2\\2\\u0100\\u0101\\7q\\2\\2\\u0101\"+\n\t\t\"Z\\3\\2\\2\\2\\u0102\\u0103\\7h\\2\\2\\u0103\\u0104\\7q\\2\\2\\u0104\\u0105\\7t\\2\\2\\u0105\"+\n\t\t\"\\\\\\3\\2\\2\\2\\u0106\\u0107\\7q\\2\\2\\u0107\\u0108\\7h\\2\\2\\u0108^\\3\\2\\2\\2\\u0109\"+\n\t\t\"\\u010a\\7v\\2\\2\\u010a\\u010b\\7q\\2\\2\\u010b`\\3\\2\\2\\2\\u010c\\u010d\\7v\\2\\2\\u010d\"+\n\t\t\"\\u010e\\7{\\2\\2\\u010e\\u010f\\7r\\2\\2\\u010f\\u0110\\7g\\2\\2\\u0110b\\3\\2\\2\\2\\u0111\"+\n\t\t\"\\u0112\\7h\\2\\2\\u0112\\u0113\\7w\\2\\2\\u0113\\u0114\\7p\\2\\2\\u0114d\\3\\2\\2\\2\\u0115\"+\n\t\t\"\\u0116\\7x\\2\\2\\u0116\\u0117\\7c\\2\\2\\u0117\\u0118\\7t\\2\\2\\u0118f\\3\\2\\2\\2\\u0119\"+\n\t\t\"\\u011a\\7u\\2\\2\\u011a\\u011b\\7v\\2\\2\\u011b\\u011c\\7t\\2\\2\\u011c\\u011d\\7w\\2\\2\"+\n\t\t\"\\u011d\\u011e\\7e\\2\\2\\u011e\\u011f\\7v\\2\\2\\u011fh\\3\\2\\2\\2\\u0120\\u0122\\t\\3\"+\n\t\t\"\\2\\2\\u0121\\u0120\\3\\2\\2\\2\\u0122\\u0123\\3\\2\\2\\2\\u0123\\u0121\\3\\2\\2\\2\\u0123\"+\n\t\t\"\\u0124\\3\\2\\2\\2\\u0124j\\3\\2\\2\\2\\u0125\\u0129\\t\\4\\2\\2\\u0126\\u0128\\t\\5\\2\\2\"+\n\t\t\"\\u0127\\u0126\\3\\2\\2\\2\\u0128\\u012b\\3\\2\\2\\2\\u0129\\u0127\\3\\2\\2\\2\\u0129\\u012a\"+\n\t\t\"\\3\\2\\2\\2\\u012al\\3\\2\\2\\2\\u012b\\u0129\\3\\2\\2\\2\\u012c\\u012e\\t\\5\\2\\2\\u012d\"+\n\t\t\"\\u012c\\3\\2\\2\\2\\u012e\\u012f\\3\\2\\2\\2\\u012f\\u012d\\3\\2\\2\\2\\u012f\\u0130\\3\\2\"+\n\t\t\"\\2\\2\\u0130n\\3\\2\\2\\2\\u0131\\u0133\\t\\6\\2\\2\\u0132\\u0131\\3\\2\\2\\2\\u0133\\u0134\"+\n\t\t\"\\3\\2\\2\\2\\u0134\\u0132\\3\\2\\2\\2\\u0134\\u0135\\3\\2\\2\\2\\u0135\\u0136\\3\\2\\2\\2\\u0136\"+\n\t\t\"\\u0137\\b8\\2\\2\\u0137p\\3\\2\\2\\2\\7\\2\\u0123\\u0129\\u012f\\u0134\\3\\b\\2\\2\";\n\tpublic static final ATN _ATN =\n\t\tnew ATNDeserializer().deserialize(_serializedATN.toCharArray());\n\tstatic {\n\t\t_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];\n\t\tfor (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {\n\t\t\t_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);\n\t\t}\n\t}\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/generated/java/edu/duke/summer/client/algorithm/inputLexer.java b/client/src/generated/java/edu/duke/summer/client/algorithm/inputLexer.java
--- a/client/src/generated/java/edu/duke/summer/client/algorithm/inputLexer.java	(revision aa0107d1ac2044f0f7ed49d1b2ffe277854ee062)
+++ b/client/src/generated/java/edu/duke/summer/client/algorithm/inputLexer.java	(date 1658448468848)
@@ -1,4 +1,4 @@
-// Generated from edu\duke\summer\client\algorithm\input.g4 by ANTLR 4.5
+// Generated from edu/duke/summer/client/algorithm/input.g4 by ANTLR 4.5
 package edu.duke.summer.client.algorithm;
 import org.antlr.v4.runtime.Lexer;
 import org.antlr.v4.runtime.CharStream;
Index: client/src/main/java/edu/duke/summer/client/stomp/RespObjectCreatingField.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.duke.summer.client.stomp;\n\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class RespObjectCreatingField {\n    private List<String> objectField;\n    private HashMap<String, String> fieldType;\n\n    public RespObjectCreatingField(){}\n    public RespObjectCreatingField(List<String> objectField, HashMap<String, String> fieldType) {\n        this.objectField = objectField;\n        this.fieldType = fieldType;\n    }\n\n    public List<String> getObjectField() {\n        return objectField;\n    }\n\n    public void setObjectField(List<String> objectField) {\n        this.objectField = objectField;\n    }\n\n    public HashMap<String, String> getFieldType() {\n        return fieldType;\n    }\n\n    public void setFieldType(HashMap<String, String> fieldType) {\n        this.fieldType = fieldType;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/edu/duke/summer/client/stomp/RespObjectCreatingField.java b/client/src/main/java/edu/duke/summer/client/stomp/RespObjectCreatingField.java
--- a/client/src/main/java/edu/duke/summer/client/stomp/RespObjectCreatingField.java	(revision aa0107d1ac2044f0f7ed49d1b2ffe277854ee062)
+++ b/client/src/main/java/edu/duke/summer/client/stomp/RespObjectCreatingField.java	(date 1658449163720)
@@ -1,14 +1,16 @@
 package edu.duke.summer.client.stomp;
 
+import edu.duke.summer.client.dto.ObjectFieldTypeDto;
+
 import java.util.HashMap;
 import java.util.List;
 
 public class RespObjectCreatingField {
     private List<String> objectField;
-    private HashMap<String, String> fieldType;
+    private HashMap<String, ObjectFieldTypeDto> fieldType;
 
     public RespObjectCreatingField(){}
-    public RespObjectCreatingField(List<String> objectField, HashMap<String, String> fieldType) {
+    public RespObjectCreatingField(List<String> objectField, HashMap<String, ObjectFieldTypeDto> fieldType) {
         this.objectField = objectField;
         this.fieldType = fieldType;
     }
@@ -21,11 +23,11 @@
         this.objectField = objectField;
     }
 
-    public HashMap<String, String> getFieldType() {
+    public HashMap<String, ObjectFieldTypeDto> getFieldType() {
         return fieldType;
     }
 
-    public void setFieldType(HashMap<String, String> fieldType) {
+    public void setFieldType(HashMap<String, ObjectFieldTypeDto> fieldType) {
         this.fieldType = fieldType;
     }
 }
